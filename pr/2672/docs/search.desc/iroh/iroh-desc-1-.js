searchState.loadedDescShard("iroh", 1, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this <code>Conn</code> is closed.\nReturns <code>true</code> if the underlying relay connection is …\nAre there any nodes in this map?\nIndicate this client is the preferred way to communicate …\nIndicates this client is a prober\nHow many nodes are known?\nThe local address that the <code>Conn</code> is listening on.\nGet the local addr of the connection. If there is no …\nCreate a new <code>ClientBuilder</code>\nReturns an <code>Iterator</code> over all known nodes.\nSends a packet that tells the server whether this …\nLet the server know that this client is the preferred …\nSend a ping to the server. Return once we get an expected …\nSets whether to connect to the relay via websockets or not.\nSet an explicit proxy url to proxy all HTTP(S) traffic …\nThe public key for this client\nReads a message from the server. Returns the message and …\nReturns the relay map for this mode.\nSends a packet to the node identified by <code>dstkey</code>\nSend a packet to the server.\nSend a ping with 8 bytes of random data.\nRespond to a ping request. The <code>data</code> field should be filled …\nSend a pong back to the server.\nA fully-fledged iroh-relay server over HTTP or HTTPS.\nThe expected <code>PublicKey</code> of the relay server we are …\nSets the server url\nWhether this relay server should only be used for STUN …\nThe stun port of the relay server.\nThe <code>RelayUrl</code> where this relay server can be dialed.\nReturns the sorted relay URLs.\nThe received packet bytes.\nIf set, is a description of why the connection is …\nAn advisory duration that the client should wait before …\nThe <code>PublicKey</code> of the packet sender.\nAn advisory duration for how long the client should …\nThe HTTP upgrade protocol used for relaying.\nThe HTTP path under which the relay accepts relaying …\nThe HTTP path under which the relay allows doing latency …\nRelays over the custom relaying protocol with a custom …\nRelays over websockets.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to match the value of an HTTP upgrade header to …\nThe HTTP upgrade header used or expected.\nTLS certificate configuration.\nHandle incoming connections to the Server.\nUse Let’s Encrypt.\nRate limits.\nUse a static TLS key and certificate chain.\nThe main underlying IO stream type used for the relay …\nMetrics tracked for the relay server\nA plain non-Tls <code>tokio::net::TcpStream</code>\nConfiguration for the Relay HTTP and HTTPS server.\nA running Relay + STUN server.\nThe task for a running server actor.\nConfiguration for the full Relay &amp; STUN server.\nConfiguration for the STUN server.\nA Tls wrapped <code>tokio::net::TcpStream</code>\nTLS configuration for Relay server.\nAborts the server.\nAdds a new connection to the server and serves it.\nBurst limit for accepting new connection. Unlimited if not …\nRate limit for accepting new connection. Unlimited if not …\nNumber of connections we have accepted\nThe socket address on which the STUN server should bind.\nBytes received from a <code>FrameType::SendPacket</code>\nBytes sent from a <code>FrameType::SendPacket</code>\nMode for getting a cert.\nCreate a <code>ClientConnHandler</code>, which can verify connections …\nCloses the server and waits for the connections to …\nNumber of accepted ‘iroh derp http’ connection upgrades\n<code>FrameType::SendPacket</code> dropped that are disco messages\n<code>FrameType::SendPacket</code> received that are disco messages\n<code>FrameType::SendPacket</code> sent that are disco messages\nNumber of connections we have removed because of an error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of <code>FrameType::Ping</code>s received\nThe socket address the HTTP server is listening on.\nThe socket address on which the Relay HTTP server should …\nThe socket address the HTTPS server is listening on.\nThe socket address on which to serve the HTTPS server.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the relay <code>ServerActorTask</code> is closed.\nRate limits.\nReturns the server metadata cert that can be sent by the …\nSocket to serve metrics on.\nTODO: replace with builder\nPackets of other <code>FrameType</code>s dropped\nPackets of other <code>FrameType</code>s received\nPackets of other <code>FrameType</code>s sent\nReturns the server’s public key.\nConfiguration for the Relay server, disabled if <code>None</code>.\nReturns the server’s secret key.\nThe iroh secret key of the Relay server.\n<code>FrameType::SendPacket</code> dropped, that are not disco messages\n<code>FrameType::SendPacket</code> received, that are not disco messages\n<code>FrameType::SendPacket</code> sent, that are not disco messages\nNumber of <code>FrameType::Pong</code>s sent\nRequests graceful shutdown.\nStarts the server.\nConfiguration for the STUN server, disabled if <code>None</code>.\nThe socket address the STUN server is listening on.\nReturns the handle for the task.\nTLS configuration for the HTTPS server.\nNumber of unique client keys per day\nNumber of <code>FrameType::Unknown</code> received\nNumber of accepted websocket connections\nThe TLS certificate chain.\nConfiguration for Let’s Encrypt certificates.\nThe TLS private key.\nThe <code>AlternateServer</code>atribute\nErrors that can occur when handling a STUN packet.\nThe <code>ErrorCode</code>atribute\nerror response\nThe <code>Fingerprint</code>atribute\nindication\nSTUN request had bogus fingerprint.\nThe STUN message could not be parsed or is otherwise …\nSTUN response has malformed attributes.\nThe <code>MappedAddress</code>atribute\nThe STUN message class. Although there are four message …\nClass used to decode STUN messages\nThe <code>MessageIntegrity</code>atribute\nThe <code>MessageIntegritySha256</code>atribute\nSTUN request didn’t end in fingerprint.\nThe <code>Nonce</code>atribute\nSTUN request is not a binding request when it should be.\nSTUN packet is not a response when it should be.\nThe <code>PasswordAlgorithm</code>atribute\nThe <code>PasswordAlgorithms</code>atribute\nThe <code>Realm</code>atribute\nrequest\nThe <code>Software</code>atribute\nSTUN Attributes that can be attached to a <code>StunMessage</code>\nDescribes an error decoding a <code>StunMessage</code>\nsuccess response\nThe transaction ID is a 96-bit identifier, used to …\nThe <code>Unknown</code>atribute\nThe <code>UnknownAttributes</code>atribute\nThe <code>UserHash</code>atribute\nThe <code>UserName</code>atribute\nThe <code>XorMappedAddress</code>atribute\nReturns a reference to the internal attribute value or an …\nReturns a reference to the bytes that represents the …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns a reference to the internal attribute value or an …\nReturns the STUN attribute type of this instance.\nDecodes the STUN raw buffer\nCreates a cryptographically random transaction ID chosen …\nReturns a reference to the <code>AlternateServer</code> attribute.\nReturns a reference to the <code>ErrorCode</code> attribute.\nReturns a reference to the <code>Fingerprint</code> attribute.\nReturns a reference to the <code>MappedAddress</code> attribute.\nReturns a reference to the <code>MessageIntegrity</code> attribute.\nReturns a reference to the <code>MessageIntegritySha256</code> …\nReturns a reference to the <code>Nonce</code> attribute.\nReturns a reference to the <code>PasswordAlgorithm</code> attribute.\nReturns a reference to the <code>PasswordAlgorithms</code> attribute.\nReturns a reference to the <code>Realm</code> attribute.\nReturns a reference to the <code>Software</code> attribute.\nReturns a reference to the <code>Unknown</code> attribute.\nReturns a reference to the <code>UnknownAttributes</code> attribute.\nReturns a reference to the <code>UserHash</code> attribute.\nReturns a reference to the <code>UserName</code> attribute.\nReturns a reference to the <code>XorMappedAddress</code> attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the context associated to this decoder\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReports whether b is a STUN message.\nReturns true if this <code>StunAttribute</code> is <code>AlternateServer</code>\nReturns true if this <code>StunAttribute</code> is <code>ErrorCode</code>\nReturns true if this <code>StunAttribute</code> is <code>Fingerprint</code>\nReturns true if this <code>StunAttribute</code> is <code>MappedAddress</code>\nReturns true if this <code>StunAttribute</code> is <code>MessageIntegrity</code>\nReturns true if this <code>StunAttribute</code> is …\nReturns true if this <code>StunAttribute</code> is <code>Nonce</code>\nReturns true if this <code>StunAttribute</code> is <code>PasswordAlgorithm</code>\nReturns true if this <code>StunAttribute</code> is <code>PasswordAlgorithms</code>\nReturns true if this <code>StunAttribute</code> is <code>Realm</code>\nReturns true if this <code>StunAttribute</code> is <code>Software</code>\nReturns true if this <code>StunAttribute</code> is <code>Unknown</code>\nReturns true if this <code>StunAttribute</code> is <code>UnknownAttributes</code>\nReturns true if this <code>StunAttribute</code> is <code>UserHash</code>\nReturns true if this <code>StunAttribute</code> is <code>UserName</code>\nReturns true if this <code>StunAttribute</code> is <code>XorMappedAddress</code>\nSTUN Methods Registry\nParses a STUN binding request.\nParses a successful binding response STUN packet. The IP …\nGenerates a binding request STUN packet.\nGenerates a binding response.\nBinding\nReserved\nShared secret\nA drop guard to clean up test infrastructure.\nHandle and drop guard for test DNS and Pkarr servers.\nCreate a DNS resolver with a single nameserver.\nCreate a <code>ConcurrentDiscovery</code> with <code>DnsDiscovery</code> and …\nCreate a <code>DnsResolver</code> configured to use the test DNS server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe socket address of the DNS server.\nThe node origin domain.\nWait until a Pkarr announce for a node is published to the …\nThe HTTP URL of the Pkarr server.\nRun DNS and Pkarr servers on localhost.\nRuns a relay server with STUN enabled suitable for tests.\nRun DNS and Pkarr servers on localhost with the specified …\nA token containing everything to get a file from the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new ticket.\nThe <code>NodeAddr</code> of the provider for this ticket.\nX.509 certificate handling.\nCreate a TLS client configuration.\nCreate a TLS server configuration.\nAn error that occurs during certificate generation.\nAn X.509 certificate with a libp2p-specific extension is …\nThe contents of the specific libp2p extension, containing …\nAn error that occurs during certificate parsing.\nAn error that occurs during signature verification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a self-signed TLS certificate that includes a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to parse the provided bytes as a <code>P2pCertificate</code>.\nThe <code>PublicKey</code> of the remote peer.\nVerify the <code>signature</code> of the <code>message</code> signed by the secret …\nA join handle that owns the task it is running, and aborts …\nHolds a handle to a task and aborts it on drop.\nResolves to pending if the inner is <code>None</code>.\nA join handle that owns the task it is running, and aborts …\nIO utility to chain <code>AsyncRead</code>s together.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture to be polled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>CancelOnDrop</code> with a name and a handle to a task.\nStream for the <code>chain</code> method.\nChain two <code>AsyncRead</code>s together.\nReturns the argument unchanged.\nGets mutable references to the underlying readers in this …\nGets pinned mutable references to the underlying readers …\nGets references to the underlying readers in this <code>Chain</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Chain</code>, returning the wrapped readers.\nBuilder for the <code>Node</code>.\nUse a custom discovery mechanism.\nThe default bind addr of the RPC .\nUse the default discovery mechanism.\nDisable docs completely.\nGarbage collection is disabled.\nConfiguration for node discovery.\nStorage backend for documents.\nPersistent node.\nPolicy for garbage collection.\nGarbage collection is run at the given interval.\nThe quic-rpc server endpoint for the iroh node.\nIn memory\nIn memory node.\nIn-memory storage.\nA server which implements the iroh node.\nUse no node discovery mechanism.\nFile-based persistent storage.\nOn disk persistet, at this location.\nA node that is initialized but not yet spawned.\nHandler for incoming connections.\nThe current status of the RPC endpoint.\nRunning on this port.\nStopped.\nConfiguration for storage.\nHandle an incoming connection.\nRegisters a protocol handler for incoming connections.\nBinds the node service to a different socket.\nReturns the <code>crate::blobs::store::Store</code> used by the node.\nConfigure a blob events sender. This will replace the …\nBuilds a node without spawning it.\nReturns a token that can be used to cancel the node.\nCleans up an existing rpc lock\nReturns a client to control this node over an in-memory …\nReturn a client to control this node over an in-memory …\nDisables documents support on this node completely.\nOptionally set a custom DNS resolver to use for the magic …\nReturns a reference to the <code>Downloader</code> used by the node.\nConfigure the default iroh rpc endpoint, on the default …\nConfigure the default iroh rpc endpoint.\nReturns the <code>Endpoint</code> of the node.\nReturns the <code>Endpoint</code> of the node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the garbage collection policy.\nReturns a protocol handler for an ALPN.\nReturns a protocol handler for an ALPN.\nReturns a reference to the <code>Gossip</code> handle used by the node.\nGet the relay server we are connected to.\nSkip verification of SSL certificates from relay servers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to log the SSL pre-master key.\nLoad the current RPC status from the given location.\nThe address on which the node socket is bound.\nConvenience method to get just the addr part of …\nLists the local endpoint of this node.\nReturns a reference to the used <code>LocalPoolHandle</code>.\nReturns a reference to the used <code>LocalPoolHandle</code>.\nReturns a new builder for the <code>Node</code>, by default configured …\nReturns a new builder for the <code>Node</code>, by default configured …\nReturns <code>Some(addr)</code> if an RPC endpoint is running, <code>None</code> …\nSets the node discovery mechanism.\nReturns the <code>PublicKey</code> of the node.\nPersist all node data in the provided directory.\nReturns a new builder for the <code>Node</code>, configured to persist …\nReturns a new builder for the <code>Node</code>, configured to persist …\nRegister a callback for when GC is done.\nSets the relay servers to assist in establishing …\nConfigure rpc endpoint.\nUses the given <code>SecretKey</code> for the <code>PublicKey</code> instead of a …\nCalled when the node shuts down.\nCalled when the node shuts down.\nShutdown the node.\nSpawns the <code>Node</code> in a tokio task.\nSpawns the node and starts accepting connections.\nStore the current rpc status.\nCreates a new builder for <code>Node</code> using the given databases.\nActual connected RPC client.\nThe port we are connected on.\nThe ALPN protocol name for iroh-willow.\nThe <code>Engine</code> is the main handle onto a Willow store with …\nEngine for driving a willow store and synchronisation …\nStructs that allow constructing entries and other structs …\nReturns the argument unchanged.\nHandle an incoming connection.\nTypes for defining synchronisation interests.\nCalls <code>U::from(self)</code>.\nProtocol data types used in willow.\nThe <code>session</code> module contains an implementation of the …\nShutdown the engine.\nStart the Willow engine.\nStore for entries, secrets, and capabilities used in the …\nSynchronises with a peer.\nVarious utilities and data structures used in this crate.\nCustomize what to do with incoming connections.\nHandle to a Willow storage thread.\nThe <code>Engine</code> is the main handle onto a Willow store with …\nRegisters a callback to determine the fate of incoming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters an event channel for events from accepted …\nUse any available capability which covers the entry and …\nSelect which capability to use for authenticating a new …\nImport data from the provided bytes and set as payload.\nCreates an entry while setting some fields automatically.\nEither a <code>Entry</code> or a <code>EntryForm</code>.\nUse the provided <code>WriteCapability</code>.\nSet the subspace to the provided <code>SubspaceId</code>.\nSet the timestamp to the provided value.\nImport data from a file on the node’s local file system …\nSet the payload hash directly. The blob must exist in the …\nSet the payload hash directly. The blob must exist in the …\nSet the timestamp to the current system time.\nSources where payload data can come from.\nImport data from a <code>AsyncRead</code> and set as payload.\nImport data from a <code>Stream</code> of bytes and set as payload.\nSet the subspace either to a provided <code>SubspaceId</code>, or use …\nSet the timestamp either to the provided <code>Timestamp</code> or to …\nSet the subspace to the <code>UserId</code> of the user authenticating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EntryForm</code> where the subspace is set to the …\nGet the user id of the user who is the receiver of the …\nUse all the capabilities we have.\nThe receiver may be any user for which we have a secret …\nSelector for an <code>AreaOfInterest</code>.\nSelector for the area to which a capability must grant …\nSelector for a capability.\nA serializable capability.\nUse any capability that covers the provided area.\nUse any capability that covers the provided point (i.e. …\nUse the specified set of <code>AreaOfInterest</code>.\nThe receiver must be the provided user.\nBuilder for <code>Interests</code>.\nEnum for describing synchronisation interests.\nHelper trait to accept both <code>Area</code> and <code>AreaOfInterest</code> in the …\nA read authorisation.\nUse the selected capabilities and areas.\nSelect the receiver for a capability.\nUse the widest area allowed by a capability, with no …\nUse the capability which covers the biggest area.\nA write authorisation.\nAdd a capability and areas of interest\nAdd a specific area included in one of our capabilities …\nAdd the full area of a capability we have into the …\nCreates interests that include all our capabilities.\nCreates a <code>CapSelector</code> which selects the widest capability …\nConverts this builder into <code>Interests</code>.\nReturns a <code>InterestBuilder</code> to build our <code>Interests</code>.\nSelect a capability which authorises writing the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the area to which the capability grants access.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the provided capability is matched by this …\nChecks whether the provided <code>Area</code> is matched by this …\nThe namespace to which the capability must grant access.\nCreates a new <code>CapSelector</code>.\nSelect the user who may use the capability.\nCreates a <code>CapSelector</code> which selects the widest capability …\nTypes for the basic data model of Willow.\nUtilities for Willow’s entry groupings.\nPublic-key crypto types for willow\nThe capability system of Willow.\nPrimitives for Private Area Intersection\nTypes and helpers for the Willow General Purpose Sync …\nAn entry in a willow store.\nSee <code>willow_data_model::Component</code>.\nOne of the path’s component is too large.\nThe byte length of a <code>PayloadDigest</code>.\nAn entry in a willow store.\nExtension methods for <code>Entry</code>.\nAn error arising from trying to construct a invalid <code>Path</code> …\nAn error arising from trying to construct a invalid <code>Path</code> …\nA natural number for limiting the number of path …\nA natural number for limiting the length of path …\nA natural number max_path_length for limiting the overall …\nA type for identifying namespaces.\nAn immutable Willow path.\nExtension methods for <code>Path</code>.\nThe path’s total length in bytes is too large.\nThe path’s total length in bytes is too large.\nA payload digest used in entries.\nThe capability type needed to authorize writes (serde …\nA type for identifying subspaces.\nA Timestamp is a 64-bit unsigned integer, that is, a …\nThe path has too many components.\nThe path has too many components.\nAn error indicating an <code>AuthorisationToken</code> does not …\nThe capability type needed to authorize writes.\nReturns a tuple of namespace, subspace and path.\nCertifies that an Entry may be written.\nDecodes an entry from a bytestring.\nEncodes the entry into a bytestring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new path from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProves that the [<code>willow_data_model::Entry</code>] was created by …\n<code>AuthorisedEntry</code> wrapper that can be serialized with <code>serde</code>.\n<code>Entry</code> wrapper that can be serialized with <code>serde</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA value that signals that an [<code>Area</code>] includes Entries with …\nSee <code>willow_data_model::grouping::Area</code>.\nExtension methods for <code>Area</code>.\nSee <code>willow_data_model::grouping::AreaOfInterest</code>.\nExtension methods for <code>AreaOfInterest</code>.\nSee <code>willow_data_model::grouping::AreaSubspace</code>.\nA closed range consists of a start value and an end_value.\nA concrete [<code>SubspaceId</code>].\nAn open range consists only of a start value.\nA single point in the 3D range space.\nOne-dimensional grouping over a type of value.\nSee <code>willow_data_model::grouping::Range3d</code>.\nDetermines whether a <code>Range</code> is <em>closed</em> or <em>open</em>.\nTo be included in this [<code>AreaOfInterest</code>], an [<code>crate::Entry</code>] …\nA range includes all values strictly less than its end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new range which includes everything.\nReturn if the <code>RangeEnd</code> is greater than the given value.\nReturn whether a given value is included by the <code>Range</code> or …\nReturns <code>true</code> if the area contains <code>point</code>.\nReturns <code>true</code> if <code>other</code> range is fully included in this <code>Range</code>…\nCreate the intersection between this <code>Range</code> and another …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be included in this AreaOfInterest, an Entry’s …\nThe total payload_lengths of all included Entries is at …\nConstruct a range.\nConstruct a new closed range from a start and end_value, …\nConstruct a new open range from a start value.\nCreates a new area with <code>path</code> as prefix and no constraints …\nA range includes all values greater than or equal to its …\nConverts the area into a <code>Range3d</code>.\nCreates a new area of interest with the specified area and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommunal namespace.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\n<code>NamespacePublicKey</code> in bytes\nThe type of the namespace, either communal or owned.\nThe corresponding public key for a `NamespaceSecretKey.\nNamespace secret key.\nThe signature obtained by signing a message with a …\nOwned namespace.\n<code>UserPublicKey</code> in bytes\nThe corresponding public key for a `UserSecretKey.\nUser secret key.\nThe signature obtained by signing a message with a …\nGet this <code>NamespaceId</code> as a byte slice.\nGet this <code>UserId</code> as a byte slice.\nConvert to byte slice.\nConvert to byte slice.\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a `NamespaceSecretKey from a byte array.\nCreate from a slice of bytes.\nCreate from a byte slice.\nCreate from a slice of bytes.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate a new, random [<code>NamespaceSecretKey] with an encoded [</code>…\nCreate a new <code>UserSecretKey</code> with a random key.\nGet the <code>NamespaceId</code> for this namespace.\nConvert into a <code>NamespaceId</code>.\nGet the <code>UserId</code> for this author.\nConvert into a <code>UserId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>UserPublicKey</code>.\nConvert into <code>NamespacePublicKey</code>.\nGet the <code>NamespacePublicKey</code> for this namespace.\nGet the <code>UserPublicKey</code> for this author.\nSign a message with this `NamespaceSecretKey key.\nSign a message with this <code>UserSecretKey</code> key.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nStrictly verify a signature on a message with this `…\nVerify that a signature matches the <code>msg</code> bytes and was …\nStrictly verify a signature on a message with this …\nVerify that a signature matches the <code>msg</code> bytes and was …\nA mode granting read or write access to some <code>Area</code>.\nThe granted area of the capability we tried to delegate …\nMaps namespace public keys to booleans, determining …\nRepresents an authorisation to read an area of data in a …\nThe given secret did not correspond to the receiver of the …\nCertifies that an Entry may be written.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> covers a larger area than <code>other</code>, or …\nProves that the [<code>willow_data_model::Entry</code>] was created by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogical channel for controlling the binding of new …\nResource handle for <code>crate::proto::grouping::AreaOfInterest</code>…\nLogical channel for controlling the binding of new …\nResource handle for …\nComplete the commitment scheme to determine the challenge …\nAllow the other peer to reduce its total buffer capacity …\nThe server notifies the client that it has started …\nThe client notifies the server that it can stop dropping …\nAsk the other peer to free a resource handle.\nMake a binding promise of available buffer capacity to the …\nAsk the other peer to send an ControlAbsolve message such …\nLogical channel for transmitting Entries and Payloads …\nTransmit an AuthorisedEntry to the other peer, and …\nTransmit some transformed Payload bytes.\nExpress preferences for Payload transfer in the …\nThe different resource handles employed by the WGPS.\nLogical channel for controlling the binding of new …\nResource handle for the private set intersection part of …\nAn Entry together with information about how much of its …\nThe different logical channels employed by the WGPS.\nAn iterator over the variants of LogicalChannel\nThe maximum payload size limits when the other peer may …\nBind data to an IntersectionHandle for performing private …\nFinalise private set intersection for a single item.\nSend a previously requested SubspaceCapability.\nAsk the receiver to send a SubspaceCapability.\nResource handle that controls the matching from Payload …\nWhereas write access control is baked into the Willow data …\nLogical channel for performing 3d range-based set …\nPrepare transmission of the LengthyEntries a peer has in a …\nTransmit a <code>LengthyEntry</code> as part of 3d range-based set …\nSend a Fingerprint as part of 3d range-based set …\nTransmit some transformed Payload bytes.\nIndicate that no more bytes will be transmitted for the …\nBind an AreaOfInterest to an AreaOfInterestHandle.\nBind a ReadCapability to a CapabilityHandle.\nBind a StaticToken to a StaticTokenHandle.\nLogical channel for controlling the binding of new …\nResource handle for <code>super::StaticToken</code>s that peers need to …\nWhenever a peer is granted a complete read capability of …\nAn AreaOfInterest that the peer wishes to reference in …\nA CapabilityHandle bound by the sender that grants access …\nThe number of consecutive bytes from the start of the …\nA ReadCapability that the peer wishes to reference in …\nA SubspaceCapability whose granted namespace corresponds …\nThe number of Entries the sender has in the range.\nIf this message is the last of a set of messages that …\nIf this message is the last of a set of messages that …\nThe dynamic part of the entry’s AuthorisationToken.\nThe DynamicToken of the Entry to transmit.\nThe Entry in question.\nThe LengthyEntry itself.\nThe Entry to transmit.\nThe Fingerprint of the range, that is, of all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe result of first applying hash_into_group to some …\nThe result of performing scalar multiplication between the …\nThe IntersectionHandle, bound by the sender, of the …\nThe IntersectionHandle of the PaiBindFragment message …\nThe IntersectionHandle bound by the sender for the …\nThe handle of the PaiRequestSubspaceCapability message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nSet to true if the private set intersection item is a …\nThe nonce of the sender, encoded as a big-endian unsigned …\nThe offset in the Payload in bytes at which Payload …\nThe 3dRange whose Fingerprint is transmitted.\nThe 3dRange whose LengthyEntries to transmit.\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nThe SyncSignature issued by the Receiver of the capability …\nThe SyncSubspaceSignature issued by the receiver of the …\nThe StaticToken to bind.\nA StaticTokenHandle, bound by the sender of this message, …\nA <code>StaticTokenHandle</code> bound to the StaticToken of the Entry …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA boolean flag to indicate whether the sender wishes to …\nWhether the sender promises to send the Entries in the …\nThe peer that initiated the synchronisation session.\nThe peer that accepted the synchronisation session.\nRun reconciliations and data mode, until intentionally …\nRun a single, full reconciliation, and then quit.\nTo break symmetry, we refer to the peer that initiated the …\nOptions to initialize a session.\nA session can either run a single reconciliation, or keep …\nCreates a new <code>SessionInit</code> with <code>SessionMode::Continuous</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntents are handles onto a Willow synchronisation session.\nSelects the areas we wish to synchronize.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we initiated the session.\nReturns <code>true</code> if we accepted the session.\nReturns <code>true</code> if the session runs in live mode.\nSelects the session mode (once or continuous).\nCreates a new <code>SessionInit</code> with <code>SessionMode::ReconcileOnce</code>.\nThe session was closed with an error.\nSubmit new interests into the session.\nWe found an intersection between our and the peer’s …\nClose the intent.\nAll interests were reconciled.\nOutcome of driving an intent to completion.\nEvents emitted from a session for an synchronisation …\nA synchronisation intent.\nHandle to a <code>Intent</code>.\nUpdates that may be submitted from an intent into the …\nWe found an intersection between our and the peer’s …\nNo interests were reconciled.\nSome interests were reconciled.\nWe reconciled an area.\nWe reconciled all interests submitted in this intent.\nSubmit new synchronisation interests into the session.\nClose the intent.\nWait for the intent to be completed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the namespace if the event is related to a …\nCreate a new intent with associated handle.\nCreate a new detached intent.\nAbort the intent.\nSplit the <code>IntentHandle</code> into a update sink and event stream.\nSerializable version of EventKind\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn-memory storage implementation for testing purposes.\nTraits for storage backends for the Willow store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCapability storage.\nRead-only interface to <code>EntryStorage</code>.\nStorage for entries.\nStorage for user and namespace secrets.\nError returned from <code>SecretStorage</code>.\nStorage backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUp to how many values to send immediately, before sending …\n<code>k</code> in the protocol, how many splits to generate. at least 2\nTraits for encoding and decoding values to and from bytes.\nIncrement a fixed-length byte string by one, by …\nA simple asynchronous queue.\nAsynchronous reader to read bytes from a channel.\nAsynchronous writer to write bytes into a channel.\nAdd guarantees available for sending messages.\nClose the channel.\nClose the channel.\nClose the channel.\nClose the channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new channel with a byte <code>Writer</code> on the transmit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the maximum buffer size of the channel.\nCreate a new channel with a message <code>Sender</code> on the transmit …\nRead a chunk of bytes from the channel.\nReceive the next message from the channel.\nSend a message into the channel.\nThe outcome of <code>Decoder::decode_from</code>\nDecoded a value.\nTrait for decoding values from bytes.\nTrait for encoding values into bytes.\nNot enough data to decode the value.\nDecode <code>Self</code> from a byte slice.\nEncode <code>Self</code> into a vector of bytes.\nEncode <code>Self</code> into a writable buffer which implements …\nReturns the length (in bytes) of the encoded value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bytes used for decoding the value.\nThe decoded value.\nWraps a <code>Gen</code> into a <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe reader returned from <code>chunked_pipe</code>.\nThe writer returned from <code>chunked_pipe</code>.\nIn-memory local-io async pipe between a <code>AsyncStreamWriter</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple unbounded FIFO queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to pop the next item from the front of the queue.\nPush a new item to the back of the queue.\nWrapper around <code>Stream</code> that takes a cancel token to cancel …\nWrapper around <code>ReceiverStream</code> that can be closed with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current system time in microseconds since …\nUtilities for filesystem operations.\nUtilities for working with tokio io\nConfiguration paths for iroh.\nGeneric utilities to track progress of data transfers.\nA data source\nInformation about the content on a path\nThis function converts an already canonicalized path to a …\ntotal number of files in the directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function that translates a key that was derived …\nLoads a <code>SecretKey</code> from the provided file, or stores a …\nReturns blob name for this data source.\nCreates a new <code>DataSource</code> from a <code>PathBuf</code>.\nReturns the path of this data source.\nWalks the directory to get the total size and number of …\nHelper function that creates a document key from a …\nThis function converts a canonicalized relative path to a …\nCreate data sources from a directory.\nCreate data sources from a path.\ntotal size of all the files in the directory\nCreates a new <code>DataSource</code> from a <code>PathBuf</code> and a custom name.\nTodo: gather more information about validation errors. …\nThe data failed to validate\nGeneric io error. We were unable to read the data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to the node’s file based blob store.\nPath to the console state\nPath to the <code>iroh_docs::AuthorId</code> of the node’s default …\nPath to the iroh-docs document database\nPaths to files or directories used by Iroh.\nPath to store known peer data.\nPath to RPC lock file, containing the RPC port if running.\nPath to the node’s secret key for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the path for this <code>IrohPaths</code> by joining the name to a …\nA sender for progress messages.\nA wrapper around <code>AsyncRead</code> which increments a …\nA generic progress event emitter.\nA writer that tries to send the total number of bytes …\nBlock until the message is sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrements the progress by <em>amount</em>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner writer\nCreates a new emitter.\nCreate a new <code>ProgressWriter</code> from an inner writer\nCreate a new progress sender.\nCreate a no-op progress sender.\nSend a message\nSets a new total in case you did not now the total up …\nReturns a receiver that gets incremental values.\nTry to send a message.\nWraps an <code>AsyncRead</code> which implicitly calls …")