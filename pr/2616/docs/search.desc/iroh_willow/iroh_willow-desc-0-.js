searchState.loadedDescShard("iroh_willow", 0, "Implementation of willow\nThe peer that initiated the synchronisation session.\nThe peer that accepted the synchronisation session.\nTo break symmetry, we refer to the peer that initiated the …\nStructs that allow constructing entries and other structs …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVarious utilities and data structures used in this crate.\nCustomize what to do with incoming connections.\nRegisters a callback to determine the fate of incoming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters an event channel for events from accepted …\nUse any available capability which covers the entry and …\nSelect which capability to use for authenticating a new …\nImport data from the provided bytes and set as payload.\nCreates an entry while setting some fields automatically.\nEither a <code>Entry</code> or a <code>EntryForm</code>.\nUse the provided [<code>WriteCapability</code>].\nSet the subspace to the provided <code>SubspaceId</code>.\nSet the timestamp to the provided value.\nImport data from a file on the node’s local file system …\nSet the payload hash directly. The blob must exist in the …\nSet the timestamp to the current system time.\nSources where payload data can come from.\nImport data from a <code>AsyncRead</code> and set as payload.\nImport data from a <code>Stream</code> of bytes and set as payload.\nSet the subspace either to a provided <code>SubspaceId</code>, or use …\nSet the timestamp either to the provided <code>Timestamp</code> or to …\nSet the subspace to the <code>UserId</code> of the user authenticating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EntryForm</code> where the subspace is set to the …\nGet the user id of the user who is the receiver of the …\nThe receiver may be any user for which we have a secret …\nSelector for the area to which a capability must grant …\nSelector for a capability.\nA serializable capability.\nUse any capability that covers the provided area.\nUse any capability that covers the provided point (i.e. …\nThe receiver must be the provided user.\nA read authorisation.\nSelect the receiver for a capability.\nUse the capability which covers the biggest area.\nA write authorisation.\nSelect a capability which authorises writing the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect the area to which the capability grants access.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the provided capability is matched by this …\nChecks whether the provided <code>Area</code> is matched by this …\nThe namespace to which the capability must grant access.\nCreates a new <code>CapSelector</code>.\nSelect the user who may use the capability.\nCreates a <code>CapSelector</code> which selects the widest capability …\nCreates a <code>CapSelector</code> which selects the widest capability …\nThe ALPN protocol name for iroh-willow.\nQUIC application error code for closing connections …\nQUIC application error code for closing with failure.\nQUIC application error code for graceful connection …\nQUIC application error code when closing connection …\nPublic-key crypto types for willow\nPrimitives for Private Area Intersection\nAn entry in a willow store.\nSee <code>willow_data_model::Component</code>.\nOne of the path’s component is too large.\nThe byte length of a <code>PayloadDigest</code>.\nAn entry in a willow store.\nExtension methods for <code>Entry</code>.\nAn error arising from trying to construct a invalid <code>Path</code> …\nAn error arising from trying to construct a invalid <code>Path</code> …\nA natural number for limiting the number of path …\nA natural number for limiting the length of path …\nA natural number max_path_length for limiting the overall …\nA type for identifying namespaces.\nSee <code>willow_data_model::Path</code>.\nExtension methods for <code>Path</code>.\nThe path’s total length in bytes is too large.\nThe path’s total length in bytes is too large.\nA payload digest used in entries.\nThe capability type needed to authorize writes (serde …\nA type for identifying subspaces.\nA Timestamp is a 64-bit unsigned integer, that is, a …\nThe path has too many components.\nThe path has too many components.\nAn error indicating an <code>AuthorisationToken</code> does not …\nThe capability type needed to authorize writes.\nReturns a tuple of namespace, subspace and path.\nCertifies that an Entry may be written.\nDecodes an entry from a bytestring.\nEncodes the entry into a bytestring.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new path from a slice of bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProves that the [<code>willow_data_model::Entry</code>] was created by …\n<code>Entry</code> wrapper that can be serialized with <code>serde</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA value that signals that an [<code>Area</code>] includes Entries with …\nSee <code>willow_data_model::grouping::Area</code>.\nExtension methods for <code>Area</code>.\nSee <code>willow_data_model::grouping::AreaOfInterest</code>.\nExtension methods for <code>AreaOfInterest</code>.\nSee <code>willow_data_model::grouping::AreaSubspace</code>.\nA closed range consists of a start value and an end_value.\nA concrete [<code>SubspaceId</code>].\nAn open range consists only of a start value.\nA single point in the 3D range space.\nOne-dimensional grouping over a type of value.\nSee <code>willow_data_model::grouping::Range3d</code>.\nDetermines whether a <code>Range</code> is <em>closed</em> or <em>open</em>.\nTo be included in this [<code>AreaOfInterest</code>], an [<code>crate::Entry</code>] …\nA range includes all values strictly less than its end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new range which includes everything.\nReturn if the <code>RangeEnd</code> is greater than the given value.\nReturn whether a given value is included by the <code>Range</code> or …\nReturns <code>true</code> if the area contains <code>point</code>.\nReturns <code>true</code> if <code>other</code> range is fully included in this <code>Range</code>…\nCreate the intersection between this <code>Range</code> and another …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be included in this AreaOfInterest, an Entry’s …\nThe total payload_lengths of all included Entries is at …\nConstruct a range.\nConstruct a new closed range from a start and end_value, …\nConstruct a new open range from a start value.\nCreates a new area with <code>path</code> as prefix and no constraints …\nA range includes all values greater than or equal to its …\nConverts the area into a <code>Range3d</code>.\nCreates a new area of interest with the specified area and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommunal namespace, needs […\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\nLength of the byte encoding of <code>Self</code>.\n<code>NamespacePublicKey</code> in bytes\nThe type of the namespace, either communal or owned.\nThe corresponding public key for a `NamespaceSecretKey.\nNamespace secret key.\nThe signature obtained by signing a message with a …\nOwned namespace, needs [<code>super::meadowcap::OwnedCapability</code>] …\n<code>UserPublicKey</code> in bytes\nThe corresponding public key for a `UserSecretKey.\nUser secret key.\nThe signature obtained by signing a message with a …\nGet this <code>NamespaceId</code> as a byte slice.\nGet this <code>UserId</code> as a byte slice.\nConvert to byte slice.\nConvert to byte slice.\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a `NamespaceSecretKey from a byte array.\nCreate from a slice of bytes.\nCreate from a byte slice.\nCreate from a slice of bytes.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate from a byte array.\nCreate a new, random [<code>NamespaceSecretKey] with an encoded [</code>…\nCreate a new <code>UserSecretKey</code> with a random key.\nGet the <code>NamespaceId</code> for this namespace.\nConvert into a <code>NamespaceId</code>.\nGet the <code>UserId</code> for this author.\nConvert into a <code>UserId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>UserPublicKey</code>.\nConvert into <code>NamespacePublicKey</code>.\nWhether this is the key for a communal namespace.\nGet the <code>NamespacePublicKey</code> for this namespace.\nGet the <code>UserPublicKey</code> for this author.\nSign a message with this `NamespaceSecretKey key.\nSign a message with this <code>UserSecretKey</code> key.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nConvert into a byte array.\nStrictly verify a signature on a message with this `…\nVerify that a signature matches the <code>msg</code> bytes and was …\nStrictly verify a signature on a message with this …\nVerify that a signature matches the <code>msg</code> bytes and was …\nA mode granting read or write access to some <code>Area</code>.\nThe granted area of the capability we tried to delegate …\nRepresents an authorisation to read an area of data in a …\nThe given secret did not correspond to the receiver of the …\nCertifies that an Entry may be written.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> covers a larger area than <code>other</code>, or …\nProves that the [<code>willow_data_model::Entry</code>] was created by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum payload size limits when the other peer may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogical channel for controlling the binding of new …\nLogical channel for controlling the binding of new …\nLogical channel for transmitting Entries and Payloads …\nLogical channel for controlling the binding of new …\nThe different logical channels employed by the WGPS.\nAn iterator over the variants of LogicalChannel\nLogical channel for performing 3d range-based set …\nLogical channel for controlling the binding of new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResource handle for [<code>AreaOfInterest</code>]s that peers wish to …\nResource handle for [<code>ReadCapability</code>] that certify access …\nThe different resource handles employed by the WGPS.\nResource handle for the private set intersection part of …\nResource handle that controls the matching from Payload …\nResource handle for [<code>StaticToken</code>]s that peers need to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComplete the commitment scheme to determine the challenge …\nAllow the other peer to reduce its total buffer capacity …\nThe server notifies the client that it has started …\nThe client notifies the server that it can stop dropping …\nAsk the other peer to free a resource handle.\nMake a binding promise of available buffer capacity to the …\nAsk the other peer to send an ControlAbsolve message such …\nTransmit an AuthorisedEntry to the other peer, and …\nTransmit some transformed Payload bytes.\nExpress preferences for Payload transfer in the …\nAn Entry together with information about how much of its …\nBind data to an IntersectionHandle for performing private …\nFinalise private set intersection for a single item.\nSend a previously requested SubspaceCapability.\nAsk the receiver to send a SubspaceCapability.\nWhereas write access control is baked into the Willow data …\nPrepare transmission of the LengthyEntries a peer has in a …\nTransmit a <code>LengthyEntry</code> as part of 3d range-based set …\nSend a Fingerprint as part of 3d range-based set …\nTransmit some transformed Payload bytes.\nIndicate that no more bytes will be transmitted for the …\nBind an AreaOfInterest to an AreaOfInterestHandle.\nBind a ReadCapability to a CapabilityHandle.\nBind a StaticToken to a StaticTokenHandle.\nWhenever a peer is granted a complete read capability of …\nAn AreaOfInterest that the peer wishes to reference in …\nA CapabilityHandle bound by the sender that grants access …\nThe number of consecutive bytes from the start of the …\nA ReadCapability that the peer wishes to reference in …\nA SubspaceCapability whose granted namespace corresponds …\nThe number of Entries the sender has in the range.\nIf this message is the last of a set of messages that …\nIf this message is the last of a set of messages that …\nThe dynamic part of the entry’s AuthorisationToken.\nThe DynamicToken of the Entry to transmit.\nThe Entry in question.\nThe LengthyEntry itself.\nThe Entry to transmit.\nThe Fingerprint of the range, that is, of all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe result of first applying hash_into_group to some …\nThe result of performing scalar multiplication between the …\nThe IntersectionHandle, bound by the sender, of the …\nThe IntersectionHandle of the PaiBindFragment message …\nThe IntersectionHandle bound by the sender for the …\nThe handle of the PaiRequestSubspaceCapability message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet to true if the private set intersection item is a …\nThe nonce of the sender, encoded as a big-endian unsigned …\nThe offset in the Payload in bytes at which Payload …\nThe 3dRange whose Fingerprint is transmitted.\nThe 3dRange whose LengthyEntries to transmit.\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the receiver of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nAn AreaOfInterestHandle, bound by the sender of this …\nThe SyncSignature issued by the Receiver of the capability …\nThe SyncSubspaceSignature issued by the receiver of the …\nThe StaticToken to bind.\nA StaticTokenHandle, bound by the sender of this message, …\nA <code>StaticTokenHandle</code> bound to the StaticToken of the Entry …\nA boolean flag to indicate whether the sender wishes to …\nWhether the sender promises to send the Entries in the …\nThe peer that initiated the synchronisation session.\nThe peer that accepted the synchronisation session.\nRun reconciliations and data mode, until intentionally …\nResources bound by ourselves.\nRun a single, full reconciliation, and then quit.\nTo break symmetry, we refer to the peer that initiated the …\nThe bind scope for resources.\nOptions to initialize a session with.\nResources bound by the other peer.\nFinish the session gracefully.\nWait for the session to finish.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of interests we wish to synchronize, together with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if we initiated the session.\nReturns <code>true</code> if we accepted the session.\nSubmit a new synchronisation intent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll interests were reconciled.\nA synchronisation intent.\nHandle to a <code>Intent</code>.\nNo interests were reconciled.\nSome interests were reconciled.\nSubmit new synchronisation interests into the session.\nClose the intent.\nWait for the intent to be completed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new intent with associated handle.\nCreate a new detached intent.\nAbort the intent.\nSplit the <code>IntentHandle</code> into a update sink and event stream.\nConvert the form into an <code>Entry</code> by filling the fields with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe entry is inserted locally.\nThe entry was received from a peer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIngest a new entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a store reader.\nReturns a store snapshot.\nSetup a new subscription, identified by <code>session_id</code>.\nRemove a subscription.\nAdd an area to the list of watched areas for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUp to how many values to send immediately, before sending …\n<code>k</code> in the protocol, how many splits to generate. at least 2\nTraits for encoding and decoding values to and from bytes.\nIncrement a fixed-length byte string by one, by …\nA simple asynchronous queue.\nAsynchronous reader to read bytes from a channel.\nAsynchronous writer to write bytes into a channel.\nAdd guarantees available for sending messages.\nClose the channel.\nClose the channel.\nClose the channel.\nClose the channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new channel with a byte <code>Writer</code> on the transmit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the maximum buffer size of the channel.\nCreate a new channel with a message <code>Sender</code> on the transmit …\nRead a chunk of bytes from the channel.\nReceive the next message from the channel.\nSend a message into the channel.\nThe outcome of <code>Decoder::decode_from</code>\nDecoded a value.\nTrait for decoding values from bytes.\nTrait for encoding values into bytes.\nNot enough data to decode the value.\nDecode <code>Self</code> from a byte slice.\nEncode <code>Self</code> into a vector of bytes.\nEncode <code>Self</code> into a writable buffer which implements …\nReturns the length (in bytes) of the encoded value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bytes used for decoding the value.\nThe decoded value.\nWraps a <code>Gen</code> into a <code>Stream</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA simple unbounded FIFO queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempt to pop the next item from the front of the queue.\nPush a new item to the back of the queue.\nWrapper around <code>Stream</code> that takes a cancel token to cancel …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current system time in microseconds since …")