searchState.loadedDescShard("iroh_net_report", 0, "Checks the network conditions from the current host.\nSender to the main service.\nClient to run net_reports.\nEnum of metrics for the module\nOptions for running probes\nPieces needed to do QUIC address discovery.\nLatencies per relay node.\nA net_report report.\nReturns a new address to send messages to this actor.\nAttempts to bind a local socket to send STUN packets from.\nCaptivePortal is set when we think there’s a captive …\nA client config.\nCreate an <code>Options</code> that disables all probes\nA QUIC Endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRuns a net_report, returning the report.\nGet report with channel\nRuns a net_report, returning the report.\nip:port of global IPv4\n<code>[ip]:port</code> of global IPv6\nWhether the router supports communicating between two …\nEnable or disable https probe\nEnable or disable icmp_v4 probe\nEnable or disable icmp_v6 probe\nAn ICMPv4 round trip completed, <code>None</code> if not checked.\nAn ICMPv6 round trip completed, <code>None</code> if not checked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable ipv4 QUIC address discovery probes\nAn IPv4 STUN round trip completed.\nan IPv4 packet was able to be sent\nEnable ipv6 QUIC address discovery probes\nAn IPv6 STUN round trip completed.\nAn IPv6 packet was able to be sent\nReturns an iterator over all the relays and their …\nWhether STUN results depend on which STUN server you’re …\nWhether STUN results depend on which STUN server you’re …\nCreates a new net_report client.\nTest if IPv6 works at all, or if it’s been hard disabled …\ncould bind a socket to ::1\nProbe indicating the presence of port mapping protocols on …\n<code>None</code> for unknown\nEnable quic probes\nPass a received STUN packet to the net_reporter.\nkeyed by relay Url\nkeyed by relay Url\nkeyed by relay Url\nSet the ipv4 stun socket and enable ipv4 stun probes\nSet the ipv6 stun socket and enable ipv6 stun probes\nAsync rust task spawning and utilities that work natively …\nSleep and timeout utilities that work natively (via tokio) …\nA UDP STUN round trip completed.\nA wrapper around a <code>tokio::task::JoinHandle</code>, which aborts …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA collection of tasks spawned on a Tokio runtime.\nAbort the task associated with this handle, equivalent to …\nAbort the task associated with the handle.\nAborts all tasks on this <code>JoinSet</code>.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nRemoves all tasks from this <code>JoinSet</code> without aborting them.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a task ID that identifies the task which errored …\nReturns a task ID that uniquely identifies this task …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nReturns whether the <code>JoinSet</code> is empty.\nChecks if the task associated with this handle is finished,\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nAwaits the completion of all tasks in this <code>JoinSet</code>, …\nWaits until one of the tasks in the set completes and …\nWaits until one of the tasks in the set completes and …\nReturns the number of tasks currently in the <code>JoinSet</code>.\nCreate an <code>AbortOnDropHandle</code> from a <code>JoinHandle</code>.\nCreate a new <code>JoinSet</code>.\nPolls for one of the tasks in the set to complete.\nPolls for one of the tasks in the set to complete.\nAborts all tasks and waits for them to finish shutting …\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nSpawn the provided task on the <code>JoinSet</code>, returning an …\nSpawn the blocking code on the blocking threadpool and …\nSpawn the blocking code on the blocking threadpool of the …\nSpawn the provided task on the current <code>LocalSet</code> and store …\nSpawn the provided task on the provided <code>LocalSet</code> and store …\nSpawn the provided task on the provided runtime and store …\nConsumes the join error, returning the object with which …\nTries to join one of the tasks in the set that has …\nTries to join one of the tasks in the set that has …\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nThe duration of one nanosecond.\nThe duration of one second.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the instant at which the future will complete.\nReturns <code>MissedTickBehavior::Burst</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturns the amount of time elapsed from another instant to …\nThe internal duration between this point and another.\nReturns the amount of time elapsed since this instant was …\nTime error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nCreates a new <code>Duration</code> from the specified number of weeks.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns true if this <code>Duration</code> spans no time.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nThe internal duration between this point and another.\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nPanics\nPanics\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nErrors returned by <code>Timeout</code>.\nErrors encountered by the timer implementation.\nCreates an error representing a timer at capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error representing a misconfigured timer.\nReturns <code>true</code> if the error was caused by the timer being at …\nReturns <code>true</code> if the error was caused by the timer being …\nReturns <code>true</code> if the error was caused by the timer being …\nCreates an error representing a shutdown timer.")