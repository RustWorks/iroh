searchState.loadedDescShard("iroh_docs", 0, "Multi-dimensional key-value documents with an efficient …\nAuthor key to insert entries in a <code>crate::Replica</code>\nTimestamps of the latest entry for each author.\n<code>AuthorPublicKey</code> in bytes\nIdentifier for an <code>Author</code>\nContains both a key (either secret or public) to a …\n<code>NamespacePublicKey</code> in bytes\nThe corresponding <code>VerifyingKey</code> for a <code>NamespaceSecret</code>. It …\nNamespace key of a <code>crate::Replica</code>.\nThis contains an actor spawned on a separate thread to …\neither a public or private key\nHandlers and actors to for live syncing replicas.\nAuthor heads\nKeys used in iroh-docs\nMetrics for iroh-docs\nNetwork implementation of the iroh-docs protocol\nA list of nodes to contact.\nImplementation of Set Reconcilliation based on “…\nStorage trait and implementation for iroh-docs documents\nAPI for iroh-docs replicas\nTickets for [<code>iroh-docs</code>] documents.\nOptions when opening a replica.\nThe state for an open replica.\nThe <code>SyncHandle</code> controls an actor thread which executes …\nMakes sure that all pending database operations are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBy how many handles the replica is currently held open\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawn a sync actor and return a handle.\nSubscribe to replica events.\nOptionally subscribe to replica events.\nHow many event subscriptions are open\nSet sync state to true.\nWhether to accept sync requests for this replica.\nSet to true to set sync state to true.\nCapacity of the channel for the <code>ToLiveActor</code> messages.\nA node connected to us and we accepted the exchange\nWe initiated the exchange\nThe content of an entry was downloaded and is now …\nPersistent default author for a docs engine.\nWhere to persist the default author.\nDirect join request via API\nThe sync engine coordinates actors that manage open …\nA local insertion.\nReceived a remote insert.\nEvents informing about actions of the live sync progress.\nMemory storage.\nWe lost a neighbor in the swarm.\nWe have a new neighbor in the swarm.\nPeer showed up as new neighbor in the gossip swarm\nWhy we performed a sync exchange\nAll pending content is now ready.\nFile based persistent storage.\nWe received a sync report while a sync was running, so run …\nCapacity for the channels for <code>Engine::subscribe</code>.\nEvent emitted when a sync operation completes\nA set-reconciliation sync finished.\nWhy we started a sync request\nWe synced after receiving a sync report that indicated …\nThe persistent default author for this engine.\n<code>Endpoint</code> used by the engine.\nConverts an <code>EntryStatus</code> into a [‘ContentStatus’].\nTimestamp when the sync started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current default author.\nHandle an incoming iroh-docs connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStop the live sync for a document and leave the gossip …\nLoad the default author from the storage.\nLoad the default author from storage.\nOrigin of the sync exchange\nPeer we synced with\nSave a new default author.\nResult of the sync operation\nSet the default author.\nShutdown the engine.\nStart the sync engine.\nStart to sync a document.\nTimestamp when the sync finished\nSubscribe to replica and sync progress events.\nHandle to the actor thread.\nIf the content is available at the local node\nThe inserted entry.\nThe inserted entry.\nThe peer that sent us the entry.\nThe content hash of the newly available entry content\nThis actor subscribes to all gossip events. When receiving …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA peer now has content available for a hash.\nThe content of an entry was downloaded and is now …\nContains the error value\nEvents informing about actions of the live sync progress.\nWe lost a neighbor in the swarm.\nWe have a new neighbor in the swarm.\nContains the success value\nAn iroh-docs operation\nAll pending content is now ready.\nA new entry was inserted into the document.\nName used for logging when new node addresses are added …\nEvent emitted when a sync operation completes\nA set-reconciliation sync finished.\nReport of a successful sync with the new heads.\nWe synced with another peer, here’s the news.\nMessages to the sync actor\nRunning download futures.\nNumber of entries received\nNumber of entries sent\nTimestamp when the sync started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEncoded <code>AuthorHeads</code>\nReceiver for actor messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContent hashes which are wanted but not yet queued because …\nCreate the live actor.\nOrigin of the sync exchange\nPeer we synced with\nContent hashes queued in downloader.\nRemove a hash from the set of queued hashes.\nResult of the sync operation\nRun the actor loop.\nRunning sync futures (from accept).\nRunning sync futures (from connect).\nTimestamp when the sync finished\nSync state per replica and peer\nSubscribers to actor events\nSend messages to self. Note: Must not be used in methods …\nThe content hash of the newly available entry content\nA node connected to us and we accepted the exchange\nWe initiated the exchange\nDirect join request via API\nContains an entry for each active (syncing) namespace, and …\nPeer showed up as new neighbor in the gossip swarm\nWhy we performed a sync exchange\nState of a node with regard to a namespace.\nWe received a sync report while a sync was running, so run …\nWhy we started a sync request\nWe synced after receiving a sync report that indicated …\nThe state we’re in for a node and a namespace\nAccept a sync request.\nGet the <code>PeerState</code> for a namespace and node. If the …\nInsert a finished sync operation into the state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a namespace into the set of syncing namespaces.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we syncing this namespace?\nReturns whether a <code>super::live::Event::PendingContentReady</code> …\nRemove a namespace from the set of syncing namespaces.\nSet whether a <code>super::live::Event::PendingContentReady</code> may …\nStart a sync request.\nTimestamps of the latest entry for each author.\nAuthor key to insert entries in a <code>crate::Replica</code>\n<code>AuthorPublicKey</code> in bytes\nIdentifier for an <code>Author</code>\n<code>NamespacePublicKey</code> in bytes\nThe corresponding <code>VerifyingKey</code> for a <code>NamespaceSecret</code>. It …\nNamespace key of a <code>crate::Replica</code>.\nGet the byte representation of this <code>AuthorId</code>.\nGet the byte representation of this <code>NamespaceId</code>.\nConvert to byte slice.\nConvert to byte slice.\nConvert to a base32 string limited to the first 10 bytes …\nConvert to a base32 string limited to the first 10 bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>Author</code> from a byte array.\nCreate from a slice of bytes.\nCreate a <code>NamespaceSecret</code> from a byte array.\nCreate from a slice of bytes.\nGet the <code>AuthorId</code> for this author.\nGet the <code>NamespaceId</code> for this namespace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>NamespacePublicKey</code>.\nConvert into <code>AuthorPublicKey</code>.\nCreate a new <code>Author</code> with a random key.\nCreate a new <code>NamespaceSecret</code> with a random key.\nGet the <code>AuthorPublicKey</code> for this author.\nGet the <code>NamespacePublicKey</code> for this namespace.\nConvert into <code>NamespacePublicKey</code> by fetching from a …\nConvert into <code>AuthorPublicKey</code> by fetching from a …\nSign a message with this <code>Author</code> key.\nSign a message with this <code>NamespaceSecret</code> key.\nReturns the <code>Author</code> byte representation.\nReturns the <code>NamespaceSecret</code> byte representation.\nConvert to byte array.\nConvert to byte array.\nStrictly verify a signature on a message with this <code>Author</code>…\nVerify that a signature matches the <code>msg</code> bytes and was …\nStrictly verify a signature on a message with this …\nVerify that a signature matches the <code>msg</code> bytes and was …\nMetrics for iroh-docs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe aborted the sync request.\nReason why we aborted an incoming sync request.\nErrors that may occur on handling incoming sync …\nWhether we want to accept or reject an incoming sync …\nAccept the sync request.\nWe are already syncing this namespace.\nFailed to close\nFailed to close\nFailed to establish connection\nFailed to establish connection\nErrors that may occur on outgoing sync requests.\nThe ALPN identifier for the iroh-docs protocol\nWe experienced an error while trying to provide the …\nNamespace is not available.\nFailed to open replica\nDecline the sync request\nThe remote peer aborted the sync request.\nFailed to run sync\nFailed to run sync\nDetails of a finished sync operation.\nTime a sync operation took\nTime to establish connection\nConnect to a peer and sync a replica\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle an iroh-docs connection and sync all shared …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the namespace (if available)\nThe namespace that was synced.\nThe outcome of the sync operation\nGet the peer’s node ID (if available)\nThe peer we syned with.\nTime to run sync exchange\nThe time this operation took\nAbort message (sent by the accepting peer to decline a …\nState for the receiver side of the sync protocol.\nInit message (sent by the dialing peer)\nSync Protocol\nSync messages (sent by both peers)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self and get the <code>SyncOutcome</code> for this connection.\nGet the namespace that is synced, if available.\nCreate a new state for a single connection.\nHandle connection and run to end.\nRuns the initiator side of the sync protocol.\nInitial message\nNamespace to sync\nThe outcome of a <code>Store::put</code> operation.\nThe entry was inserted.\nThe key type for this entry.\nThe entry was not inserted because a newer entry for its …\nStores a range.\nStore entries that can be fingerprinted and put into …\nTransfers items inside a range to the other participant.\nA trait constraining types that are valid entry keys.\nA trait constraining types that are valid entry values.\nThe value type for this entry. See\nGet all entries in the store\nGet the fingerprint for this entry.\nThe fingerprint of the empty set\nInsert just the given key value pair.\nRemove an entry from the store.\nThe fingerprint of <code>range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single entry.\nCalculate the fingerprint of the given range.\nGet a the first key (or the default if none is available).\nReturns all entries in the given range.\nReturns the number of entries in the range.\nIf false, requests to send local items in the range. …\nConstruct the initial message.\nGenerates the initial message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the vector contains no elements.\nGet the key for this entry.\nGet the number of entries in the store.\nUp to how many values to send immediately, before sending …\nReturns all entries whose key starts with the given <code>prefix</code>.\nReturns all entries that share a prefix with <code>key</code>, …\nProcesses an incoming message and produces a response. If …\nInsert a key value pair.\nThe range out of which the elements are.\nRemove all entries whose key start with a prefix and for …\n<code>k</code> in the protocol, how many splits to generate. at least 2\nGet the value for this entry.\nNumber of entries that were removed as a consequence of …\nMatches any key.\nMatches any author.\nSort ascending\nAuthor matching.\nSort by author, then key.\nSort descending\nDownload policy to decide which content blobs shall be …\nStore that gives read access to download policies for a …\nDownload every key unless it matches one of the filters.\nMatches if the contained bytes and the key are the same.\nOnly keys that are exactly the provided value.\nMatches exactly the provided author.\nFilter strategy used in download policies.\nQuery on all entries without aggregation.\nOutcome of <code>Store::import_namespace</code>\nThe namespace did not exist before and is now inserted.\nSort by key, then author.\nKey matching.\nIn-memory key storage\nThe namespace existed and its capability remains unchanged.\nThe replica does not exist.\nDo not download any key unless it matches one of the …\nError return from <code>Store::open_replica</code>\nOther error while opening the replica.\nNumber of peers to cache per document.\nMatches if the contained bytes are a prefix of the key.\nAll keys that start with the provided value.\nStore trait for expanded public keys for authors and …\nNote: When using the <code>SingleLatestPerKey</code> query kind, the …\nA query builder for document queries.\nQuery that only returns the latest entry for a key which …\nFields by which the query can be sorted\nSort direction\nThe namespace existed and now has an upgraded capability.\nQuery all records.\nFilter by author.\nCreate a <code>Query::all</code> query filtered by a single author.\nBuild the query.\nBuild the query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOn disk storage for replicas.\nGet the download policy for a document.\nCall to include empty entries (deletion markers).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilter by exact key match.\nCreate a <code>Query::all</code> query filtered by a single key.\nFilter by key prefix.\nCreate a <code>Query::all</code> query filtered by a key prefix.\nSet the maximum number of entries to be returned.\nGet the limit for this query (max. number of entries to …\nCheck if an entry should be downloaded according to this …\nVerifies whether this filter matches a given key\nTest if a key is matched by this <code>KeyFilter</code>.\nTest if an author is matched by this <code>AuthorFilter</code>.\nSet the offset within the result set from where to start …\nGet the offset for this query (number of entries to skip …\nConvert a byte array into a  <code>VerifyingKey</code>.\nQuery only the latest entry for each key, omitting older …\nSet the sort for the query.\nSet the order direction for the query.\nUtilities useful across different store impls.\nIterator for all content hashes\nIterator over the latest entry per author.\nIterator over parent entries, i.e. entries with the same …\nAn iterator over a range of entries from the records table.\nManages the replicas and authors for an instance.\nA wrapper around <code>Store</code> for a specific <code>NamespaceId</code>\nCreate a new iterator over all content hashes.\nClose a replica.\nGet all content hashes of all replicas in the store.\nDelete an author.\nFlush the current transaction, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an author key from the store.\nGet the download policy for a namespace.\nGet an entry by key and author.\nGet a the first key (or the default if none is available).\nGet the latest entry for each author in a namespace.\nGet an iterator over entries of a replica.\nGet the peers that have been useful for a document.\nCheck if a <code>AuthorHeads</code> contains entry timestamps that we …\nImport an author key pair.\nImport a new replica namespace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nList all author keys in this store.\nList all replica namespaces in this store.\nLoad the replica info from the store.\nCreate a new store in memory.\nGet exclusive write access to the tables in the current …\nCreate a new author key and persist it in the store.\nCreate a new replica for <code>namespace</code> and persist in this …\nOpen a replica from this store.\nCreate or open a store from a <code>path</code> to a database file.\nRanges and helpers for working with <code>redb</code> tables\nRegister a peer that has been useful to sync a document.\nRemove a replica.\nSet the download policy for a namespace.\nGet a read-only snapshot of the database.\nGet an owned read-only snapshot of the database.\nGet access to the tables to read from them.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nBounds for the by-key index table.\nBounds on the records table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement a byte string by one, by incrementing the last …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmigration 001: populate the latest table (which did not …\nCopy the namespaces data from V1 to V2.\nDelete the v1 namespaces table.\nmigration 004: populate the by_key index table(which did …\nRun all database migrations, if needed.\nA query iterator for entry queries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nAn extension trait for <code>Range</code> that provides methods for …\nAn iterator over a range of entries from the records table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nGet the next entry, but only if the callback function …\nGet the next item in the range.\nGet the next item in the range.\nGet the next entry and map the item with a callback …\nLike <code>Self::next_filter_map</code>, but the callback returns a …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nTable: Authors Key:   <code>[u8; 32]</code> # AuthorId Value: <code>[u8; 32]</code> …\nTable: Download policy Key:   <code>[u8; 32]</code>        # NamespaceId\nTable: Latest per author Key:   <code>([u8; 32], [u8; 32])</code>    # …\nTable: Namespaces v2 Key:   <code>[u8; 32]</code>       # NamespaceId …\nTable: Namespaces v1 (replaced by Namespaces v2 in …\nTable: Peers per document. Key:   <code>[u8; 32]</code>        # …\nNumber of seconds elapsed since …\nTable: Records by key Key:   <code>([u8; 32], Vec&lt;u8&gt;, [u8; 32]])</code>…\nTable: Records Key:   <code>([u8; 32], [u8; 32], &amp;[u8])</code> # …\nBorrows dependent.\nBorrows owner.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns the the owner.\nConstructs a new self-referential struct.\nCreate a clone of the records table for use in iterators.\nTries to create a new structure with a given dependent …\nTries to create a new structure with a given dependent …\nCalls given closure <code>func</code> with a shared reference to …\nCalls given closure <code>func</code> with an unique reference to …\nIn-memory key storage\nStore trait for expanded public keys for authors and …\nConvert a <code>AuthorId</code> into a <code>AuthorPublicKey</code>.\nConvert a <code>AuthorId</code> into a <code>AuthorPublicKey</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a <code>NamespaceId</code> into a <code>NamespacePublicKey</code>.\nConvert a <code>NamespaceId</code> into a <code>NamespacePublicKey</code>.\nConvert a byte array into a  <code>VerifyingKey</code>.\nThe selection is not yet finished, keep pushing more items.\nThe iterator is finished.\nA helper for stores that have by-author and by-key indexes …\nHelper to extract the latest entry per key from an …\nThe selection yielded an entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush an entry into the selector.\nTimestamps of the latest entry for each author.\nEntry signature is invalid.\nThe capability of the namespace.\nErrors for capability operations\nKind of capability of the namespace.\nThe replica is closed, no operations may be performed.\nThe content is completely available.\nWhether the content status is available on a node.\nCallback that may be set on a replica to determine the …\nA single entry in a <code>Replica</code>\nAttempted to insert an empty entry.\nSignature over an entry.\nEvent emitted by sync when entries are added.\nThe content is partially available.\nError emitted when inserting entries into a <code>Replica</code> failed\nWhether an entry was inserted locally or by a remote peer.\nEntry has length 0 but not the empty hash, or the empty …\nEntry namespace does not match the current replica.\nThe entry was inserted locally.\nA local entry has been added.\nMax time in the future from our wall clock time that we …\nThe content is missing.\nNamespaces are not the same\nA newer entry exists for either this entry’s key or a …\nByte representation of a <code>PeerId</code> from <code>iroh-net</code>.\nProtocol message for the set reconciliation protocol.\nA readable replica.\nRead only access to the namespace.\nError that occurs trying to access the <code>NamespaceSecret</code> of …\nReplica is read only.\nThe data part of an entry in a <code>Replica</code>.\nThe identifier of a record.\nA remote entry has been added.\nLocal representation of a mutable, synchronizable …\nIn memory information about an open replica.\nA signed entry.\nStorage error\nThe entry was received from the remote node identified by …\nOutcome of a sync operation.\nEntry timestamp is too far in the future.\nValidation failure\nReason why entry validation failed\nA writable replica.\nWrite access to the namespace.\nGet this <code>RecordIdentifier</code> as a tuple of byte slices.\nGet this <code>RecordIdentifier</code> as Bytes.\nGet the <code>AuthorId</code> of this entry.\nGet the <code>AuthorId</code> of this record as byte array.\nGet the author bytes of this entry.\nGet the <code>Capability</code> of this <code>Replica</code>.\nReturns true if the replica is closed.\nGet the content <code>Hash</code> of the entry.\nGet the <code>Hash</code> of the content data of this record.\nGet the content length of the entry.\nGet the length of the data addressed by this record’s …\nDecode from byte slice created with <code>Self::encode</code>.\nDelete entries that match the given <code>author</code> and key <code>prefix</code>.\nCreate a tombstone record (empty content)\nCreate a tombstone record with the timestamp set to now.\nSerialize this entry into its canonical byte …\nSerialize this <code>RecordIdentifier</code> into a mutable byte array.\nSerialize this record into a mutable byte array.\nEncode into a byte array with a limited size.\nGet the <code>Entry</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new signed entry by signing an entry with the …\nCreate a new signature by signing an entry with the …\nCreate a new signed entries from its parts.\nCreate a <code>Capability</code> from its raw representation.\nGet the timestamp for an author.\nCan this state offer newer stuff to <code>other</code>?\nHash of the content data.\nHashes the given data and inserts it.\nTimestamp of the latest entry for each author in the set …\nGet the <code>NamespaceId</code> for this <code>Capability</code>.\nGet the namespace identifier for this <code>Replica</code>.\nGet the <code>RecordIdentifier</code> for this entry.\nInsert a new record at the given key.\nInsert a new timestamp.\nInsert a signed entry into the database.\nInsert an entry into this replica which was received from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the entry is empty.\nWhether this <code>AuthorHeads</code> is empty.\nCreate an iterator over the entries in this state.\nGet the key of the entry.\nGet the key of this entry.\nGet the key of this record.\nGet the key of this record as <code>Bytes</code>.\nGet the kind of capability.\nNumber of author-timestamp pairs.\nLength of the data referenced by <code>hash</code>.\nMerge this capability with another capability.\nMerge another author head state into this one.\nMerge a capability.\nGet the <code>NamespaceId</code> of this entry.\nGet the <code>NamespaceId</code> of this record as byte array.\nCreate a new replica.\nCreate a new replica.\nCreate a new entry\nCreate a new <code>RecordIdentifier</code>.\nCreate a new record.\nCreate a new <code>Record</code> with the timestamp set to now.\nCreate a new empty entry with the current timestamp.\nNumber of entries we received.\nNumber of entries we sent.\nGet the raw representation of this namespace capability.\nGet the <code>Record</code> contained in this entry.\nGet the identifier for an entry in this replica.\nGet the <code>NamespaceSecret</code> of this <code>Capability</code>. Will fail if …\nGet the byte representation of the <code>NamespaceSecret</code> key for …\nSet the content status callback.\nSign this entry with a <code>NamespaceSecret</code> and <code>Author</code>.\nGet the signature.\nSubscribe to insert events.\nGet the number of current event subscribers.\nCreate the initial message for the set reconciliation flow …\nProcess a set reconciliation message from a remote peer.\nGet the timestamp of the entry.\nGet the timestamp of this record.\nRecord creation timestamp. Counted as micros since the …\nGet this <code>RecordIdentifier</code> as a tuple of bytes.\nSerialize this entry into a new vector with its canonical …\nExplicitly unsubscribe a sender.\nValidate that the entry has the empty hash if the length …\nValidate that the entry has the empty hash if the length …\nValidate a <code>SignedEntry</code> if it’s fit to be inserted.\nVerify the signatures on this entry.\nVerify that this signature was created by signing the <code>entry</code>…\nInserted entry.\nInserted entry.\nPeer that provided the inserted entry.\nDocument in which the entry was inserted.\nDocument in which the entry was inserted.\n<code>ContentStatus</code> for this entry in the remote’s replica.\nWhether download policies require the content to be …\nThe peer from which we received this entry.\nWhether the peer claims to have the content blob for this …\nContains both a key (either secret or public) to a …\nWire format for <code>DocTicket</code>.\neither a public or private key\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new doc ticket\nA list of nodes to contact.")