searchState.loadedDescShard("iroh_blobs", 0, "Blobs layer for iroh.\nA format identifier\nThe hash for the empty byte range (<code>b&quot;&quot;</code>).\nHash type used throughout.\nA hash and format pair\nA sequence of BLAKE3 hashes\nBlock size used by iroh, 2^4*1024 = 16KiB\nRaw blob\nBytes of the hash.\nHandle downloading blobs and collections concurrently and …\nFunctions to export data from a store\nConvert to a base32 string limited to the first 10 bytes …\nDefines data formats for HashSeq.\nThe format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Hash</code> from its raw bytes representation.\nThe client side API\nThe hash\nCreate a new hash and format pair, using the collection …\ntraits related to collections of blobs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs hash seq format\nIs raw format\nMetrics for iroh-blobs\nCalculate the hash of the provided bytes.\nCreate a new hash and format pair.\nProtocol for transferring content-addressed blobs and …\nThe server side API\nCreate a new hash and format pair, using the default (raw) …\nImplementations of blob stores\nConvert the hash to a hex string.\nUtility functions and types.\nAn error occurred that prevents the request from being …\nInformation about a request in progress.\nFailed to receive response from service.\nThe request was cancelled by us.\nPeer is handling at least one request.\nCancel an intent. The associated request will be cancelled …\nThe download was cancelled by us\nConcurrency limits for the <code>Downloader</code>.\nState of a connected node.\nType of connections returned by the Dialer.\nType of connections the Getter requires to perform a …\nState of the connection to this node.\nStart to dial <code>NodeId</code>.\nStart to dial <code>NodeId</code>, but first disconnect the idle node …\nTrait modeling a dialer. This allows for IO-less testing.\nError returned when a download could not be completed.\nFailed to download from any provider\nHandle to interact with a download request.\nThe kind of resource to download.\nA download request.\nHandle for the download services.\nAn error occurred that suggests the node should not be …\nContains the error value\nContains the error value\nThe result of a download request, as returned to the …\nSignals what should be done with the request when it fails.\nFuture of a get request.\nTrait modelling performing a single request over a …\nDuration for which we keep nodes connected after they were …\nPeer is idle.\nIdentifier for a download intent.\nThe result of a download request, as used in this module.\nMessages the service can receive.\nThe next step needed to continue a download.\nNo provider nodes found\nDeclare that nodes have a certain hash and can be used for …\nContains the success value\nContains the success value\nWe have tried all available providers. There is nothing …\nAll providers are currently in a retry timeout. Park the …\nMap of potential providers for a hash.\nThe queue of requested downloads.\nQueue a download intent.\nInformation about a request.\nConfiguration for retry behavior of the <code>Downloader</code>.\nAn error occurred in which neither the node nor the …\nCapacity of the channel used to communicate between the …\nProvider connection is ready, initiate the transfer.\nResource limits are exhausted, do nothing for now and wait …\nCount of active requests for the node.\nState of running downloads.\nRegister nodes for a hash. Should only be done for hashes …\nRegister nodes for a hash, but only if the hash is already …\nChecks if the maximum number of connections has been …\nCheck if we have maxed our connection capacity.\nChecks if the maximum number of concurrent dials per hash …\nChecks if the maximum number of concurrent requests has …\nCancel a download.\nToken used to cancel the future doing the request.\nChecks that the count of active requests per peer is …\nChecks concurrency limits are maintained.\nCheck that peers queued to be disconnected are consistent …\nChecks the various invariants the service must maintain\nCheck that every hash in the provider map is needed.\nChecks that the queued requests all appear in the provider …\nLimits to concurrent tasks handled by the service.\nConnection to this node.\nNodes to which we have an active or idle connection.\nGet the total number of connected and dialing nodes.\nReturns <code>true</code> if either the main queue or the parked set …\nReturns <code>true</code> if either the main queue or the parked set …\nDialer to get connections for required nodes.\nDrop the connection to a node and insert it into the the …\nFinalize a download.\nGet the format of this download\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPeek at the front element of the main queue.\n<code>Getter</code> implementation that performs requests over …\nReturn a future that performs the download using the given …\nGet candidates to download this hash.\nThe getter performs individual requests.\nDelay queue for dropping idle nodes.\nCancels a download intent.\nHandle receiving a <code>Message</code>.\nHandle a <code>Message::Queue</code>.\nWhether we have any candidates to download this hash.\nGet the hash of this download\nGet the <code>HashAndFormat</code> pair of this download\nId used to identify the request in the <code>Downloader</code>.\nTasks for currently running downloads.\nThe initial delay to wait before retrying a node. On …\nInsert an element at the back of the main queue.\nInsert an element at the front of the main queue.\nRegistered intents with progress senders and result …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvariants for the service.\nReturns <code>true</code> if the node is currently idle.\nReturns <code>true</code> if a download is in the parked set.\nCheck if a node is being dialed.\nKind of download.\nMaximum number of nodes to dial concurrently for a single …\nMaximum number of requests the service performs …\nMaximum number of requests performed by a single node …\nMaximum number of open connections the service maintains.\nMaximum number of retry attempts for a node that failed to …\nChannel to receive messages from the service’s handle.\nChannel to communicate with the service.\nCreate a new download request.\nCreate a new Downloader with the default <code>ConcurrencyLimits</code> …\nCreate a new idle node.\nNext id to use for a download intent.\nCalculate the next step needed to proceed the download for …\nPeer doing this request attempt.\nChecks if the maximum number of concurrent requests per …\nDeclare that certains nodes can be used to download a hash.\nHandle receiving a new connection.\nMove the front item of the main queue into the parked set.\nGet the number of dialing nodes.\nDequeue the first download of the main queue.\nStart the next downloads, or dial nodes, if limits permit …\nPass a progress sender to receive progress updates.\nProgress tracker\nMap to query for nodes that we believe have the data we …\nQueue a download.\nQueue of pending downloads.\nDial a node.\nReceiver to retrieve the return value of this download.\nRemove a download from both the main queue and the parked …\nSignal the registry that this hash is no longer of …\nRemove a <code>hash</code> from the <code>ProviderMap</code>, but only if <code>Self::queue</code>…\nInformation about pending and active requests.\nConfiguration for retry behavior.\nHow many times did we retry this node?\nWhether the node is currently queued for retry.\nWe track a retry state for nodes which failed to dial or …\nDelay queue for retrying failed nodes.\nMain loop for the service.\nStart downloading from the given node.\nState of this node.\nMove a download from the parked set to the front of the …\nMove any download for a hash from the parked set to the …\nCreate a new Downloader with custom <code>ConcurrencyLimits</code> and …\n<code>Getter</code> implementation that performs requests over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe channel that can be used to subscribe to progress …\nTrack the progress of downloads.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShared <code>IdGenerator</code> for all progress senders created by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove all state for a download.\nMap of shared state for each tracked download.\nSubscribe to a tracked download.\nTrack a new download with a list of initial subscribers.\nUnsubscribe <code>sender</code> from <code>kind</code>.\nWe got an error and need to abort.\nWe are done with the whole operation.\nWe finished exporting a blob\nProgress events for an export operation\nThe download part is done for this id, we are now …\nWe have made progress exporting the data.\nExport a hash to the local file system.\nExport a single blob to a file on the local filesystem.\nExport all entries of a collection, recursively, to files …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe hash of the entry.\nUnique id of the entry.\nUnique id of the entry that is being exported.\nUnique id of the entry that is being exported.\nOperation-specific metadata.\nThe offset of the progress, in bytes.\nThe path to the file where the data is exported.\nThe size of the entry in bytes.\nThe collection type used by iroh\nA collection of blobs\nMetadata for a collection\nThe header for the collection format.\nA simple store trait for loading blobs\nLinks to the blobs in this collection\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new collection from a list of hashes and metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit a collection into a sequence of links and metadata\nCheck if this collection is empty\nIterate over the blobs in this collection\nGet the number of blobs in this collection\nGet the links to the blobs in this collection\nLoad a blob from the store\nCreate a new collection from a hash sequence and metadata.\nLoad a collection from a store given a root hash\nGet the names of the blobs in this collection\nAdd the given blob to the collection.\nRead the collection from a get fsm.\nRead the collection and all it’s children from a get fsm.\nStore a collection in a store. returns the root hash of …\nConvert the collection to an iterator of blobs, with the …\nError when opening a stream\nError when decoding, e.g. hash mismatch\nA generic error\nError when processing a response\nError when reading from the stream\nStats about the transfer.\nError when writing the handshake or request to the stream\nThe number of bytes read\nThe number of bytes written\nFunctions that use the iroh-blobs protocol in conjunction …\nThe time it took to transfer the data\nError returned from get operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinite state machine for get responses.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer rate in megabits per second\nTypes for get progress state management.\nUtilities for complex get requests.\nWe got an error and need to abort.\nAll operations finished.\nThe id of a blob in a transfer\nInformation about a the status of a blob in a store.\nA child blob (child id &gt; 0)\nwe have the blob completely\nA new connection was established.\nWe are done with <code>id</code>, and the hash is <code>hash</code>.\nProgress updates for the get operation.\nAn item was found with hash <code>hash</code>, from now on referred to …\nAn item was found with hash <code>hash</code>, from now on referred to …\nData was found locally.\nInitial state if subscribing to a running or queued …\nwe don’t have the blob at all\nwe have the blob partially\nWe got progress ingesting item <code>id</code>.\nThe root blob (child id 0)\nGet information about a blob in a store.\nLike <code>get_blob_info</code>, but for multiple hashes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a blob that was requested completely.\nGet a blob that was requested completely.\nGet a blob that was requested partially.\nGet a sequence of hashes\nGet a blob or collection into a store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRanges that are missing locally and need to be requested.\nThe size of the blob, if known.\nGiven a partial entry, get the valid ranges.\nRanges that are valid locally.\nThe partial entry.\nThe size of the entry in bytes.\nThe ranges that are available locally.\nchild offset\nIdentifier for this blob within this download.\nNumber of children in the collection, if known.\nThe hash of the entry.\nThe hash of the entry.\nThe name of the entry.\nA new unique progress id for this entry.\nThe unique id of the entry.\nThe unique id of the entry.\nThe offset of the progress, in bytes.\nThe size of the entry in bytes.\nThe size of the entry in bytes.\nThe ranges that are available locally.\nOur download request is invalid.\nFailures for a get operation\nNetwork or IO operation failed.\nOperation failed on the local node.\nRemote behaved in a non-compliant way.\nHash not found.\nRemote has reset the connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState while we are reading content\nState before reading a size header\nError that you can get from <code>AtBlobHeader::next</code>\nState when finishing the get response\nState of the get response machine after the handshake has …\nState after we have read all the content for a blob\nInitial state of the get response machine\nState of the get response when we start reading a child\nState of the get response when we start reading a …\nThe next state after reading a content item\nRequest is empty\nNo more children expected\nPossible next states after the handshake has been sent\nError that you can get from <code>AtConnected::next</code>\nDecode error that you can get once you have sent the …\nWe are done with this blob\nThe next state after the end of a blob\nA generic io error\nGeneric io error\nA generic io error\nThe hash of a leaf did not match the expected hash\nA parent was not found or invalid, so the provider stopped …\nStuff we need to hold on to while going through the …\nWe expect more content\nResponse is expected to have more children\nEof when reading the size header\nA chunk was not found or invalid, so the provider stopped …\nThe hash of a parent did not match the expected hash\nA parent was not found or invalid, so the provider stopped …\nError when serializing the request\nOwned iterator for the ranges in a request\nQuinn read error when reading the size header\nError when reading from the stream\nThe serialized request is too long to be sent\nFirst response is a child\nFirst response is either a collection or a single blob\nError when writing the request to the <code>SendStream</code>.\nBorrows dependent.\nBorrows owner.\nbytes written for statistics\nThe offset of the child we are currently reading\nConcatenate the entire response into a vec\nConcatenate the entire response into a vec\nDrain the response and throw away the result\nDrain the response and throw away the result\nFinish the get response without reading further\nFinish the get response without reading further\nImmediately finish the get response without reading further\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the root blob\nThe hash of the blob we are reading.\nThe hash of the blob we are reading.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConsumes <code>self</code> and returns the the owner.\nConstructs a new self-referential struct.\nCreate a new get response\nInitiate a new bidi stream to use for the get response\nSend the request and move to the next state\nGo into the next state, reading the header\nGo into the next state, reading the header\nRead the size header, returning it and going into the …\nRead the next item, either content, an error, or the end …\nRead the next child, or finish\nFinish the get response, returning statistics\nThe current offset of the blob we are reading.\nThe current offset of the blob we are reading.\nThe ranges we have requested for the child\nThe ranges we have requested for the child\nThe ranges we have requested for the current hash.\niterator over the ranges of the collection and the children\nThe entry point of the get response machine\nstart time for statistics\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nThe geometry of the tree we are currently reading.\nTries to create a new structure with a given dependent …\nTries to create a new structure with a given dependent …\nCalls given closure <code>func</code> with a shared reference to …\nCalls given closure <code>func</code> with an unique reference to …\nWrite the entire blob to a slice writer.\nWrite the entire blob to a slice writer.\nWrite the entire stream for this blob to a batch writer.\nWrite the entire stream for this blob to a batch writer.\nWrite the entire blob to a slice writer and to an optional …\nWrite the entire blob to a slice writer and to an optional …\nProgress state for a single blob\nState of a single blob in transfer\nDownload has finished\nDownload is pending\nThe identifier for progress events.\nDownload is in progress\nAccumulated progress state of a transfer.\nNumber of children (only applies to hashseqs, None for raw …\nChildren if the root blob is a hash seq, empty for raw …\nWhether we are connected to a node\nChild being transferred at the moment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a blob state by its <code>BlobId</code> in this transfer.\nGet the blob state currently being transferred.\nThe hash of this blob.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRanges already available locally at the time of starting …\nCreate a new, empty transfer state.\nCreate a new <code>BlobState</code>.\nUpdate the state with a new <code>DownloadProgress</code> event for …\nThe current state of the blob transfer.\nProgress ids for individual blobs.\nGet state of the root blob of this transfer.\nThe root blob of this transfer (may be a hash seq),\nThe size of this blob. Only known if the blob is partially …\nProbe for a single chunk of a blob.\nGiven a hash of a hash seq, get the hash seq and the …\nGet the claimed size of a blob from a peer.\nGet the verified size of a blob from a peer.\nGiven a sequence of sizes of children, generate a range …\nA sequence of links, backed by a <code>Bytes</code> object.\nIterator over the hashes in a <code>HashSeq</code>.\nStream over the hashes in a <code>HashSeq</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the hash at the given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nGet the underlying bytes.\nCheck if this sequence is empty.\nIterate over the hashes in this sequence.\nGet the number of hashes in this sequence.\nCreate a new sequence of hashes.\nGet the next hash in the sequence.\nParse a sequence of hashes.\nGet and remove the first hash in this sequence.\nSkip a number of hashes in the sequence.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nEnum of metrics for the module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ALPN used with quic for the iroh bytes protocol.\nReasons to close connections or stop streams.\nA get request for a blob or collection\nA request\nMaximum message size is limited to 100MiB for now.\nAn iterator over blobs in the sequence with a non-empty …\nThe provider is terminating.\nA chunk range specification as a sequence of chunk offsets.\nA chunk range specification for a sequence of blobs.\nA request to the provider\nThe provider has received the request.\nThe <code>RecvStream</code> was dropped.\nUnknown error_code, can not be converted into <code>Closed</code>.\nRequest a collection and all its children\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nblake3 hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest the last chunk of a single blob\nRequest the last chunk for all children\nRequest a blob or collection with specified ranges\nSpecifications for ranges selection in blobs and sequences …\nThe range of data to request\nThe close reason as bytes. This is a valid utf8 string …\nRequest just a single blob\nA <code>RangeSpec</code> selecting nothing from the blob.\nAn iterator over blobs in the sequence with a non-empty …\nA chunk range specification as a sequence of chunk offsets.\nA chunk range specification for a sequence of blobs.\nAn infinite iterator yielding <code>RangeSpec</code>s for each blob in …\nCreates a <code>RangeSpec</code> selecting the entire blob.\nA <code>RangeSpecSeq</code> containing all chunks from all blobs.\nIf this range seq describes a range for a single item, …\nnumber of times to emit current before grabbing next value …\ncurrent value\nA <code>RangeSpecSeq</code> containing no chunks from any blobs in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function to create a <code>RangeSpecSeq</code> from a …\nConvenience function to create a <code>RangeSpecSeq</code> from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nChecks if this <code>RangeSpec</code> selects all chunks in the blob.\nTrue if we are at the end of the iterator.\nChecks if this <code>RangeSpec</code> does not select any chunks in the …\nAn infinite iterator of range specs for blobs in the …\nAn iterator over blobs in the sequence with a non-empty …\nCreates a new <code>RangeSpec</code> from a range set.\nCreates a new range spec sequence from a sequence of range …\nremaining ranges\nCreates a <code>ChunkRanges</code> from this <code>RangeSpec</code>.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nWe got an error and need to abort.\nProgress updates for the add operation.\nWe are done with the whole operation.\nA new client connected to the node.\nA request was received from a client.\nWe are done with <code>id</code>, and the hash is <code>hash</code>.\nEvents emitted by the provider informing about the current …\nTrait for sending events.\nAn item was found with name <code>name</code>, from now on referred to …\nA request was received from a client.\nThe requested data was not found\nWe got progress ingesting item <code>id</code>.\nA helper struct that combines a quinn::SendStream with …\nThe requested data was sent\nStatus  of a send operation\nA new collection or tagged blob has been added\nA request was aborted because the client disconnected.\nA blob in a sequence was transferred.\nA request was completed and the data was sent to the …\nA sequence of hashes has been found and is being …\nThe stats for a transfer of a collection or blob.\nThe total duration of the transfer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a single connection.\nHandle a single standard get request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStats for reading from disk.\nRead the request from the getter.\nSend an event.\nStats for sending to the client.\nSend a blob to the client.\nTransfers the collection &amp; blob data.\nThe format of the added data.\nThe hash of the entry.\nThe hash of the created data.\nA new unique id for this entry.\nThe unique id of the entry.\nThe unique id of the entry.\nThe name of the entry.\nThe offset of the progress, in bytes.\nThe size of the entry in bytes.\nThe tag of the added data.\nAn unique connection id.\nAn unique connection id.\nAn unique connection id.\nAn unique connection id.\nAn unique connection id.\nAn unique connection id.\nThe quic connection id.\nThe format of the added data\nThe hash of the added data\nThe hash for which the client wants to receive data.\nThe hash of the blob\nThe index of the blob in the sequence.\nThe size of the custom get request.\nThe number of blobs in the sequence.\nAn identifier uniquely identifying this transfer request.\nAn identifier uniquely identifying this transfer request.\nAn identifier uniquely identifying this transfer request.\nAn identifier uniquely identifying this transfer request.\nAn identifier uniquely identifying this transfer request.\nAn identifier uniquely identifying this request.\nThe size of the blob transferred.\nstatistics about the transfer\nstatistics about the transfer. This is None if the transfer\nThe tag of the added data\nWe got an error and need to abort.\nWe got an error and need to abort.\nWe are done with the whole operation.\nAn async batch interface for writing bao content items to …\nThe size of a bao file\nThe hash refers to any blob and will be exported to a …\nThe hash refers to a <code>crate::format::collection::Collection</code> …\nThe entry is completely available.\nProgress updates for the validate operation\nThis mode will copy the file into the database before …\nThis mode will copy the file to the target directory.\nProgress when copying the file to the store\nA custom event (info)\nA custom event (debug)\nA custom non critical error\nA custom non critical error\nA fallible but owned iterator over the entries in a store.\nDone exporting\nConsistency check ended\nWe started validating a complete entry\nThe entry type. An entry is a cheaply cloneable handle …\nWe are done with <code>id</code>\nAn entry that is possibly writable\nWe got progress ingesting item <code>id</code>.\nThe availability status of an entry in a store.\nAn unrecoverable error during GC\nAn unrecoverable error during GC\nErrors, something is very wrong\nDatabase events\nThe expected format of a hash being exported.\nThe import mode describes how files will be imported.\nExport trogress callback\nFound a path\nA GC was completed\nAn event related to GC\nA GC was started\nAn event related to GC\nThe import mode describes how files will be imported.\nProgress messages for an import operation\nInfo messages\nA generic map from hashes to bao blobs (blobs with bao …\nAn entry for one hash in a bao map\nA partial entry\nA mutable bao map.\nThe entry is not in the store.\nDone computing the outboard\nProgress when computing the outboard\nThe entry is partially available.\nWe started validating an entry\nWe are done with <code>id</code>\nWe got progress ingesting item <code>id</code>.\nProgress when copying the file to the target\nExtension of <code>Map</code> to add misc methods used by the rpc calls.\nLevel for generic validation messages\nDetermined the size\nStarting to export to a file\nConsistency check started\nstarted validating\nThe mutable part of a Bao store.\nVery unimportant info messages\nThis mode will try to reference the file in place and …\nThis mode will try to move the file to the target …\nA remote side told us the size, but we have insufficient …\nConsistency check update\nProgress updates for the validate operation\nWe have verified the size.\nWarnings, something is not quite right\nAn implementation of a bao file, meaning some data blob …\nGet a batch writer\nlist all blobs in the database. This includes both raw …\nPerform a consistency check on the database\nCreate a new tag\nA future that resolves to a reader that can be used to …\nphysically delete the given hashes from the store.\nFind out if the data behind a <code>hash</code> is complete, partial, …\nSync version of <code>entry_status</code>, for the doc sync engine …\nThis trait method extracts a file to a local path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nredb backed storage\nNotify the store that a new gc phase is about to start.\nGet an entry for a hash.\nGet an existing entry as an EntryMut.\nGet an existing partial entry, or create a new one.\nThe hash of the entry.\nnumber of hash seq temp tags for a hash\nImport data from memory.\nThis trait method imports a file from a local path.\nImport data from a stream of bytes.\nUpgrade a partial entry to a complete entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the entry is complete.\nA full in memory database for iroh-blobs\nCreate a 16 byte unique ID.\nA future that resolves to a reader that can be used to …\nlist partial blobs in the database\nnumber of raw temp tags for a hash\nA readonly in memory database for iroh-blobs, usable for …\nSet a tag\nShutdown the store.\nThe size of the entry.\nSync the written data to permanent storage, if applicable. …\nlist all tags (collections or other explicitly added …\nCreate temp file name based on a 16 byte UUID.\nCreate a temporary pin for this store\nTemp tags\nTraits for in-memory or persistent maps of blob with bao …\nWrite a batch of bao content items to the underlying …\nThe entry this message is about, if any\nThe level of the message\nThe message\nAn error if we failed to validate the entry.\nthe hash of the entry\nthe hash of the entry\na new unique id for this entry\nThe unique id of the entry.\nThe unique id of the entry.\na new unique id for this entry\nThe unique id of the entry.\nThe unique id of the entry.\nThe offset of the progress, in bytes.\nThe offset of the progress, in bytes.\nlocation of the entry.\nlocation of the entry.\nAvailable ranges.\nThe size of the entry, in bytes.\nThe best known size of the entry, in bytes.\nThe total number of entries to validate\nConfiguration for the deferred batch writer. It will start …\nA cheaply cloneable handle to a bao file, including the …\nThe inner part of a bao file handle.\nA weak reference to a bao file handle.\nThe storage for a bao file. This can be either in memory …\nThis is finally the thing for which we can implement …\nThe entry is complete. Outboard and data can come from …\nStorage for complete blobs. There is no longer any …\nData files are stored in 3 files. The data file, the …\nA reader for a bao file, reading just the data.\nA file storage for an incomplete bao file.\nThe entry is incomplete and on disk.\nThe entry is incomplete and in memory.\nA reader for the outboard part of a bao file.\nCreate a file for reading and writing, but <em>without</em> …\nThe most precise known total size of the data file.\nThe data file. Size is determined by the chunk with the …\ndata part, which can be in memory or on disk.\nAn AsyncSliceReader for the data file.\nThe size of the data file.\nDirectory to store files in. Only used when memory limit …\nDowngrade to a weak reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the file.\nCreate a new bao file handle with a partial file.\nCreate a new mutable mem storage.\nCreate a new bao file handle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit into data, outboard and sizes files.\nTrue if the file is complete.\nTrue if the handle is still live (has strong references)\nTrue if the storage is in memory.\nMaximum data size (inclusive) before switching to file …\nCreate a new deferred batch writer configuration.\nCreate a new complete bao file handle.\nCallback to call when we switch to file mode.\nThe outboard for the file.\nThe outboard file. This is <em>without</em> the size header, since …\noutboard part, which can be in memory or on disk.\nAn AsyncSliceReader for the outboard file.\nThe size of the outboard file.\nGet the paths for a hash.\nRead from the data file at the given offset, until end of …\nRead from the outboard file at the given offset, until end …\nRead from the given file at the given offset, until end of …\nThe sizes file. This is a file with 8 byte sizes for each …\nCall sync_all on all the files.\nTake the storage out, leaving an empty storage in its …\nTransform the storage in place. If the transform fails, …\nUpgrade to a strong reference if possible.\nThis is the synchronous impl for writing a batch.\nCreate a new writer from the handle.\nAlways inline everything\nThe actor for the redb store.\nError type for message handler functions of the redb actor.\nResult type for handler functions of the redb actor.\nOptions for transaction batching.\nBulk query method: get entries from the blobs table\nFor a complete entry we always know the size. It does not …\nModification method: create a new unique tag and set it to …\nLocation of the data.\nModification method: unconditional delete the data for a …\nInternal method: dump the entire database to stdout.\nUse BaoFileHandle as the entry type for the map.\nThe information about an entry that we keep in the entry …\nQuery method: get the rough entry status for a hash. Just …\nContains the error value\nContains the error value\nModification method: export data from a redb store\nData is in several external locations. This should be a …\nPredicate for filtering entries in a redb table.\nParameters for importing from a flat store\nInternal method: validate the entire database.\nInternal method: notify the actor that a new gc epoch has …\nQuery method: get the full entry state for a hash.\nModification method: get or create a file handle for a …\nModification method: import data into a redb store\nModification method: import an entire flat store into the …\nData is in the inline_data table.\nOutboard is in the inline_outboard table.\nOptions for inlining small complete data or outboards.\nDo not inline anything, ever.\nOutboard is not needed\nContains the success value\nContains the success value\nModification method: marks a partial entry as complete. …\nModification method: inline size was exceeded for a …\nOptions for the file store.\nLocation of the outboard.\nError type for calling the redb actor from the store.\nResult type for calling the redb actor from the store.\nData is in the canonical location in the data directory.\nOutboard is in the canonical location in the data …\nPartial entries are entries for which we know the hash, …\nOptions for directories used by the file store.\nModification method: set the full entry state for a hash.\nModification method: set a tag to a value, or remove it.\nInternal method: shutdown the actor.\nStorage that is using a redb database for small files and …\nSync the entire database to disk.\nBulk query method: get the entire tags table\nUpdate inline options\nTransaction batching options.\nRead the entire blobs table. Callers can then sift through …\nComplete data files\nTake a possibly incomplete storage and turn it into …\nSynchronously compute the outboard of a file, and return …\nThe hash and format of the data to import\nPath to the directory where data and outboard files are …\nData size\nDump the entire content of the database to stdout.\nExport a file by copying out its content to a new location\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the full entry state for a hash. This is for testing …\nImport a flat store into the redb store\nImport from a v0 or v1 flat store, for backwards …\nInline storage options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad or create a new store.\nMaximum data size to inline.\nMaximum outboard size to inline.\nMaximum number of actor messages to batch before creating …\nMaximum duration to wait before committing a read …\nMaximum number of actor messages to batch before …\nMaximum duration to wait before committing a write …\nMetadata files such as the tags table\nThe export mode to use.\nCreate a new store with custom options.\nOutboard without length prefix\nOwned data path\nOwned outboard path\nPartial data files\nPath options.\nThe progress callback to use.\nSet the full entry state for a hash. This is for testing …\nThe source of the data to import, can be a temp file, …\nEnsure that all operations before the sync are processed …\nTable definitions and accessors for the redb database.\nRead the entire tags table. Callers can then sift through …\nThe target path for the export.\nPath to the directory where temp files are stored. This …\nA temp tag to keep the entry alive while exporting. This …\nTransform all entries in the store. This is for testing …\nUpdate the inline options.\nValidation of the store’s contents.\nThe new inline options\nWhether to reapply the new options to existing entries\nLocation of the data.\nLocation of the outboard.\nOnce we get the last chunk of a partial entry, we have …\nFile is storing data for the hash\nA file name that indicates the purpose of the file.\nFile is going to be used to store metadata\nFile is storing an outboard\nIncomplete data for the hash, with an unique id\nFile is storing a partial outboard\nExternal paths for the hash\nReturns the argument unchanged.\nGet the file purpose from a path, handling weird cases\nCalls <code>U::from(self)</code>.\nA hash and format pair\nThe format\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper to keep track of files to delete after a …\nA struct similar to <code>redb::ReadOnlyTable</code> but for all tables …\nA trait similar to <code>redb::ReadableTable</code> but for all tables …\nA struct similar to <code>redb::Table</code> but for all tables that …\nApply the delete set and clear it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMark a file as to be deleted after the transaction is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner set of files to delete.\nMark a file as to be kept after the transaction is …\nA wrapper for a flume receiver that allows peeking at the …\nA reader that calls a callback with the number of bytes …\nCreate an iterator that pulls messages from the receiver …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\noverwrite a file with the given data.\nPeek at the next message.\nPush back a message. This will only work if there is room …\nRead a file into memory and then delete it.\nReceive the next message.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nTry to peek at the next message.\nTry to receive the next message.\nAn in memory entry\nA fully featured in memory database for iroh-blobs, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new in memory store\nTake a read lock on the store\nTake a write lock on the store\nMutable in memory storage for a bao file.\nKeep track of the most precise size we know of.\nCreate a new mutable mem storage from the given data\nCreate a new size info for a complete file of size <code>size</code>.\nThe current size, representing the most correct size we …\nData file, can be any size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the parts data, outboard and sizes\nOutboard file, must be a multiple of 64 bytes.\nPersist the batch to disk, creating a FileBatch.\nPersist into a file where each chunk has its own slot.\nSize that was announced as we wrote that chunk\nConvert to a vec in slot format.\nWrite a size at the given offset. The size at the highest …\nThe MapEntry implementation for Store.\nA readonly in memory database for iroh-blobs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the bytes associated with a hash, if they exist.\nimport a byte slice\nInsert a new entry into the database, and return the hash …\nInsert multiple entries into the database, and return the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Store from a sequence of entries.\nWe got an error and need to abort.\nWe got an error and need to abort.\nWe are done with the whole operation.\nAn async batch interface for writing bao content items to …\nThe size of a bao file\nThe hash refers to any blob and will be exported to a …\nThe hash refers to a <code>crate::format::collection::Collection</code> …\nThe entry is completely available.\nProgress updates for the validate operation\nThis mode will copy the file into the database before …\nThis mode will copy the file to the target directory.\nProgress when copying the file to the store\nA custom event (info)\nA custom event (debug)\nA custom non critical error\nA custom non critical error\nA fallible but owned iterator over the entries in a store.\nDone exporting\nConsistency check ended\nWe started validating a complete entry\nThe entry type. An entry is a cheaply cloneable handle …\nWe are done with <code>id</code>\nAn entry that is possibly writable\nWe got progress ingesting item <code>id</code>.\nThe availability status of an entry in a store.\nAn unrecoverable error during GC\nAn unrecoverable error during GC\nErrors, something is very wrong\nDatabase events\nThe expected format of a hash being exported.\nThe import mode describes how files will be imported.\nExport trogress callback\nA wrapper around a batch writer that calls a progress …\nFound a path\nA GC was completed\nAn event related to GC\nA GC was started\nAn event related to GC\nThe import mode describes how files will be imported.\nProgress messages for an import operation\nInfo messages\nA generic map from hashes to bao blobs (blobs with bao …\nAn entry for one hash in a bao map\nA partial entry\nA mutable bao map.\nThe entry is not in the store.\nDone computing the outboard\nProgress when computing the outboard\nThe entry is partially available.\nWe started validating an entry\nWe are done with <code>id</code>\nWe got progress ingesting item <code>id</code>.\nProgress when copying the file to the target\nExtension of <code>Map</code> to add misc methods used by the rpc calls.\nLevel for generic validation messages\nDetermined the size\nStarting to export to a file\nConsistency check started\nstarted validating\nThe mutable part of a Bao store.\nVery unimportant info messages\nThis mode will try to reference the file in place and …\nThis mode will try to move the file to the target …\nA remote side told us the size, but we have insufficient …\nConsistency check update\nProgress updates for the validate operation\nWe have verified the size.\nWarnings, something is not quite right\nGet a batch writer\nlist all blobs in the database. This includes both raw …\nPerform a consistency check on the database\nCreate a new tag\nA future that resolves to a reader that can be used to …\nphysically delete the given hashes from the store.\nFind out if the data behind a <code>hash</code> is complete, partial, …\nSync version of <code>entry_status</code>, for the doc sync engine …\nThis trait method extracts a file to a local path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTraverse all roots recursively and mark them as live.\nTraverse all roots recursively and mark them as live.\nImplementation of the gc method.\nNotify the store that a new gc phase is about to start.\nRemove all blobs that are not marked as live.\nRemove all blobs that are not marked as live.\nGet an entry for a hash.\nGet an existing entry as an EntryMut.\nGet an existing partial entry, or create a new one.\nThe hash of the entry.\nImport data from memory.\nThis trait method imports a file from a local path.\nImport data from an async byte reader.\nImport data from an async byte reader.\nImport data from a stream of bytes.\nUpgrade a partial entry to a complete entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the entry is complete.\nCreate a new <code>BaoFileSize</code> with the given size and …\nCreate a new <code>FallibleProgressBatchWriter</code> from an inner …\nA future that resolves to a reader that can be used to …\nlist partial blobs in the database\nSet a tag\nShutdown the store.\nThe size of the entry.\nSync the written data to permanent storage, if applicable. …\nlist all tags (collections or other explicitly added …\nCreate a temporary pin for this store\nTemp tags\nValidate the database\nValidate the database\nGet just the value, no matter if it is verified or not.\nWrite a batch of bao content items to the underlying …\nThe entry this message is about, if any\nThe level of the message\nThe message\nAn error if we failed to validate the entry.\nthe hash of the entry\nthe hash of the entry\na new unique id for this entry\nThe unique id of the entry.\nThe unique id of the entry.\na new unique id for this entry\nThe unique id of the entry.\nThe unique id of the entry.\nThe offset of the progress, in bytes.\nThe offset of the progress, in bytes.\nlocation of the entry.\nlocation of the entry.\nAvailable ranges.\nThe size of the entry, in bytes.\nThe best known size of the entry, in bytes.\nThe total number of entries to validate\nA tag will be automatically generated\nA file\nWe got it all in memory\nThis is a general purpose Either, just like Result, except …\nThe tag is explicitly named\nA non-sendable marker type\nOption for commands that allow setting a tag\nA file that is sparse in memory\nA tag\nA trait for things that can track liveness of blobs and …\nTrait used from temp tags to notify an abstract store that …\nA hash and format pair that is protected from garbage …\nGet this as a weak reference for use in temp tags\nCreate a new tag that does not exist yet.\ncopy a limited slice from a slice as a <code>Bytes</code>.\nThe data, with gaps filled with zeros\nThe format of the pinned item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nzero copy get a limited slice from a <code>Bytes</code> as a <code>Bytes</code>.\nThe hash of the pinned item\nThe hash of the pinned item\nThe hash and format we are pinning\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtilities for working with tokio io\nKeep the item alive until the end of the process\nA local task pool with proper shutdown\nCreate a new temp tag for the given hash and format\nCreate a new non-sendable marker.\nCalled on creation of a temp tag\nCalled on drop\noptional callback to call on drop\nUtilities for reporting progress.\nThe ranges that are not zeros, so we can distinguish …\nCompute raw outboard, without the size header.\nCompute raw outboard size, without the size header.\nCreate a new temp tag for the given hash and format\nGet the number of bytes given a set of chunk ranges and …\nA reader that tracks the number of bytes read\nA writer that tracks the number of bytes written\nGet the number of bytes read\nGet the number of bytes written\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner reader\nGet the inner writer\nWrap a reader in a tracking reader\nWrap a writer in a tracking writer\nA lightweight cancellation token\nTask was dropped, either due to a panic or because the …\nLocal task pool configuration\nContains the error value\nCreate a new task and execute it locally\nShutdown the thread after finishing all tasks\nFinish all tasks and then stop\nA local task pool with proper shutdown\nA handle to a <code>LocalPool</code>\nLog the panic and continue\nContains the success value\nWhat to do when a panic occurs in a pool thread\nFuture returned by <code>LocalPoolHandle::spawn</code> and …\nLog the panic and immediately shut down the pool.\nThread shutdown mode\nErrors for spawn failures\nStop immediately\nAbort the task\nA future that resolves when the pool is cancelled\nGently shut down the pool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a cheaply cloneable handle to the pool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new local pool with the given config.\nIgnore panics in pool threads\nThe sender half of the channel used to send tasks to the …\nImmediately stop polling all tasks and wait for all …\nCreate a new local pool with a single std thread.\nSpawn a task in the pool and await the result.\nSpawn a task in the pool.\nSpawn a new pool thread.\nPrefix for thread names\nNumber of threads in the pool\nSpawn a task in the pool and return a future that resolves …\nSpawn a task in the pool.\nSpawn a task in the pool.\nGet the number of tasks in the queue\nA file\nWe got it all in memory\nThis is a general purpose Either, just like Result, except …\nTurn a reference to a MemOrFile into a MemOrFile of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if this is a Mem\nMap the file part of this MemOrFile\nMap the memory part of this MemOrFile\nGet the mem part\nGet the size of the MemOrFile\nTry to map the file part of this MemOrFile\nBoxable progress sender\nBoxable progress sender wrapper, used internally.\nA boxed progress sender\nContains the error value\nA slice writer that adds a fallible progress callback.\nA progress sender that uses a flume channel.\nAn id generator, to be combined with a progress sender.\nA no-op progress sender.\nThe message being sent.\nContains the success value\nAn error that can occur when sending progress messages.\nA result type for progress sending.\nA general purpose progress sender. This should be usable …\nA slice writer that adds a synchronous progress callback.\nThe receiver was dropped.\nTransform the message type by filter-mapping to the type …\nTransform the message type by mapping to the type of this …\nSend a message and block if the receiver is full.\nSend a message and block if the receiver is full.\nCreate a boxed progress sender to get rid of the concrete …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner writer\nReturn the inner writer.\nCreate a new progress sender from a flume sender.\nCreate a new <code>ProgressSliceWriter</code> from an inner writer and …\nCreate a new <code>ProgressSliceWriter</code> from an inner writer and …\nGet a new unique id\nReturns true if <code>other</code> sends on the same <code>flume</code> channel as …\nSend a message and wait if the receiver is full.\nSend a message and wait if the receiver is full.\nTry to send a message and drop it if the receiver is full.\nTry to send a message and drop it if the receiver is full.\nTransform the message type by filter-mapping to the type …\nTransform the message type by mapping to the type of this …\nA file that is sparse in memory\nThe data, with gaps filled with zeros\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the data and the valid ranges\nCreate a new, empty SparseMemFile\nPersist the SparseMemFile to a WriteAt\nThe ranges that are not zeros, so we can distinguish …")